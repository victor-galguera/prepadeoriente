<?php

/**
 * @file
 * File containing hooks for partner link module.
 */

use Drupal\Core\Url;
use Drupal\Core\Link;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Component\Utility\Html;

/**
 * Implements hook_help().
 */
function partner_link_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.partner_link':
      $text = file_get_contents(__DIR__ . '/README.txt');
      if (!\Drupal::moduleHandler()->moduleExists('markdown')) {
        return '<pre>' . Html::escape($text) . '</pre>';
      }
      else {
        // Use the Markdown filter to render the README.
        $filter_manager = \Drupal::service('plugin.manager.filter');
        $settings = \Drupal::configFactory()->get('markdown.settings')->getRawData();
        $config = ['settings' => $settings];
        $filter = $filter_manager->createInstance('markdown', $config);
        return $filter->process($text, 'en');
      }
  }
  return NULL;
}

/**
 * Implements hook_theme().
 */
function partner_link_theme($existing, $type, $theme, $path) {
  return [
    'partner_link_list' => [
      'variables' => [
        'partners' => [],
      ],
    ],
    // Register this theme suggestion in order to use module template.
    'taxonomy_term__partner_link__partners' => [
      'render element' => 'content',
      'base hook' => 'taxonomy_term',
    ],
  ];
}

/**
 * Implements hook_preprocess_taxonomy_term().
 */
function partner_link_preprocess_taxonomy_term(&$variables) {
  $term = $variables['term'];
  // For the icon display mode, we want to apply the link on the image.
  if ($term->getVocabularyId() == 'partner_link__partners' && $variables['view_mode'] == 'partner_link_icon') {
    $uri = $term->get('field_partner_link__link')->uri;
    if (!empty($variables['content']['field_partner_link__icon'])) {
      $img = render($variables['content']['field_partner_link__icon']);
      $url = Url::fromUri($uri);
      $link = Link::fromTextAndUrl($img, $url);
      $link = $link->toRenderable();
      $variables['content']['field_partner_link__icon'] = $link;
    }
  }
}

/**
 * Implements hook_cron().
 */
function partner_link_cron() {
  $config = \Drupal::config('partner_link.settings');
  $check_broken_links = $config->get('check_broken_links');

  // Check that the cron feature is enabled.
  if ($check_broken_links) {
    $terms = \Drupal::service('entity_type.manager')
      ->getStorage("taxonomy_term")
      ->loadTree('partner_link__partners', 0, NULL, TRUE);

    // Disable all partners with a broken URL.
    foreach ($terms as $term) {
      try {
        $uri = $term->get('field_partner_link__link')->uri;
        $response = \Drupal::httpClient()->get($uri, ['headers' => ['Accept' => 'text/plain']]);
        $data = (string) $response->getStatusCode();
        $invalid_request = empty($data) || substr($data, 0, 1) !== '2';
        if ($invalid_request) {
          $term->set('field_partner_link__enabled', 0);
          $term->save();
        }
        // Enable again if the website is back.
        elseif (!$invalid_request && $term->field_partner_link__enabled->value === '0') {
          $term->set('field_partner_link__enabled', 1);
          $term->save();
        }
      }
      catch (RequestException $e) {
        $term->set('field_partner_link__enabled', 0);
        $term->save();
      }
      catch (ConnectException $e) {
        $term->set('field_partner_link__enabled', 0);
        $term->save();
      }
    }
  }
}
