diff --git a/CHANGELOG.txt b/CHANGELOG.txt
deleted file mode 100644
index 4529b7e..0000000
--- a/CHANGELOG.txt
+++ /dev/null
@@ -1,77 +0,0 @@
-
-2012-11-10
------------
-With the help of the community, refactored the JS to allow for anonymous
-page caching. This allows the system to be fully functional with this
-setting turned on. This also improved the speed of the JavaScript. Did
-extensive testing in all browsers.
-
-I also removed the Mobile_Tools dependency for setting mobile options. Instead
-I include a copy of the lightweight Mobile Detect library
-(http://code.google.com/p/php-mobile-detect/). We are just using it to detect
-whether the user is on a mobile device. I implemented this after I discovered
-the latest Mobile Tools broke the module.
-
-2012-07-02
------------
-Created a "Show only to anonymous users" option on the When tab. Also added
-an option on the Where tab that allows you to specify the pages where the
-splash page should not show up.
-
-2012-06-30
------------
-Added a new dependency using the pageapi. This module provides a hook that
-allows splashify to work, regardless of the cache settings used on the site.
-Also added an iframe config option to the admin to configure using the iframe
-in colorbox.
-
-2012-02-17
------------
-Fixed an issue with the sequential option when using the lightbox. It was
-hitting the JS code in the drupal.behaviours attach twice. Wrapped all of
-the JS code in a .load to prevent this from happening.
-
-Did some testing with caching the JS and testing to see if modifying the
-drupal cache settings break the splash page. Discovered that setting "Cache
-pages for anonymous users" would break the splash functionality. But
-aggregating the JS code did not break the splash page.
-
-2012-02-16
------------
-Refactored the admin area to use AJAX for showing certain fields.
-
-2012-02-12
------------
-Issue #1425392 by klausi: Re-worked the JS and applied some major changes
-
-- Surrounded some output text that I missed with the t() function.
-- Took out the help text from the main config page and included it in
-hook_help(). This is in the .module file that was in the previous commit.
-- Took out some basic JavaScript and put it into a separate JS file.
-- Took out using the filter_xss() function where it was needed.
-- Simplified a few if statements.
-- I re-wrote the whole splash display mechanism. All of the JavaScript is now
-in a separate file and we send drupal settings variables to use in the JS. This
-makes the JS much easier to maintain and debug. This required a lot of
-re-working in the splashify_init() function.
-
-2012-02-11
------------
-Implemented the Libraries module for including and requiring the jStorage
-jquery library.
-
-2012-02-07
------------
-Fixed issue #1430676. The problem was not happening on my local server, but was
-happening on my dev server. Fixed the problem by putting the JS call in the
-<head> after the colorbox js/css is included.
-
-2012-02-02
------------
-Fixed issue #1425392 by vaibhavjain: Moved files to 7.x-1.x branch. Also fixed
-some minor code formatting issues.
-
-2012-01-31
------------
-Created a sandbox project for splashify. At this point I had the base code for
-the system already created.
diff --git a/LICENSE.txt b/LICENSE.txt
new file mode 100644
index 0000000..89e08fb
--- /dev/null
+++ b/LICENSE.txt
@@ -0,0 +1,339 @@
+                    GNU GENERAL PUBLIC LICENSE
+                       Version 2, June 1991
+
+ Copyright (C) 1989, 1991 Free Software Foundation, Inc.,
+ 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+                            Preamble
+
+  The licenses for most software are designed to take away your
+freedom to share and change it.  By contrast, the GNU General Public
+License is intended to guarantee your freedom to share and change free
+software--to make sure the software is free for all its users.  This
+General Public License applies to most of the Free Software
+Foundation's software and to any other program whose authors commit to
+using it.  (Some other Free Software Foundation software is covered by
+the GNU Lesser General Public License instead.)  You can apply it to
+your programs, too.
+
+  When we speak of free software, we are referring to freedom, not
+price.  Our General Public Licenses are designed to make sure that you
+have the freedom to distribute copies of free software (and charge for
+this service if you wish), that you receive source code or can get it
+if you want it, that you can change the software or use pieces of it
+in new free programs; and that you know you can do these things.
+
+  To protect your rights, we need to make restrictions that forbid
+anyone to deny you these rights or to ask you to surrender the rights.
+These restrictions translate to certain responsibilities for you if you
+distribute copies of the software, or if you modify it.
+
+  For example, if you distribute copies of such a program, whether
+gratis or for a fee, you must give the recipients all the rights that
+you have.  You must make sure that they, too, receive or can get the
+source code.  And you must show them these terms so they know their
+rights.
+
+  We protect your rights with two steps: (1) copyright the software, and
+(2) offer you this license which gives you legal permission to copy,
+distribute and/or modify the software.
+
+  Also, for each author's protection and ours, we want to make certain
+that everyone understands that there is no warranty for this free
+software.  If the software is modified by someone else and passed on, we
+want its recipients to know that what they have is not the original, so
+that any problems introduced by others will not reflect on the original
+authors' reputations.
+
+  Finally, any free program is threatened constantly by software
+patents.  We wish to avoid the danger that redistributors of a free
+program will individually obtain patent licenses, in effect making the
+program proprietary.  To prevent this, we have made it clear that any
+patent must be licensed for everyone's free use or not licensed at all.
+
+  The precise terms and conditions for copying, distribution and
+modification follow.
+
+                    GNU GENERAL PUBLIC LICENSE
+   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
+
+  0. This License applies to any program or other work which contains
+a notice placed by the copyright holder saying it may be distributed
+under the terms of this General Public License.  The "Program", below,
+refers to any such program or work, and a "work based on the Program"
+means either the Program or any derivative work under copyright law:
+that is to say, a work containing the Program or a portion of it,
+either verbatim or with modifications and/or translated into another
+language.  (Hereinafter, translation is included without limitation in
+the term "modification".)  Each licensee is addressed as "you".
+
+Activities other than copying, distribution and modification are not
+covered by this License; they are outside its scope.  The act of
+running the Program is not restricted, and the output from the Program
+is covered only if its contents constitute a work based on the
+Program (independent of having been made by running the Program).
+Whether that is true depends on what the Program does.
+
+  1. You may copy and distribute verbatim copies of the Program's
+source code as you receive it, in any medium, provided that you
+conspicuously and appropriately publish on each copy an appropriate
+copyright notice and disclaimer of warranty; keep intact all the
+notices that refer to this License and to the absence of any warranty;
+and give any other recipients of the Program a copy of this License
+along with the Program.
+
+You may charge a fee for the physical act of transferring a copy, and
+you may at your option offer warranty protection in exchange for a fee.
+
+  2. You may modify your copy or copies of the Program or any portion
+of it, thus forming a work based on the Program, and copy and
+distribute such modifications or work under the terms of Section 1
+above, provided that you also meet all of these conditions:
+
+    a) You must cause the modified files to carry prominent notices
+    stating that you changed the files and the date of any change.
+
+    b) You must cause any work that you distribute or publish, that in
+    whole or in part contains or is derived from the Program or any
+    part thereof, to be licensed as a whole at no charge to all third
+    parties under the terms of this License.
+
+    c) If the modified program normally reads commands interactively
+    when run, you must cause it, when started running for such
+    interactive use in the most ordinary way, to print or display an
+    announcement including an appropriate copyright notice and a
+    notice that there is no warranty (or else, saying that you provide
+    a warranty) and that users may redistribute the program under
+    these conditions, and telling the user how to view a copy of this
+    License.  (Exception: if the Program itself is interactive but
+    does not normally print such an announcement, your work based on
+    the Program is not required to print an announcement.)
+
+These requirements apply to the modified work as a whole.  If
+identifiable sections of that work are not derived from the Program,
+and can be reasonably considered independent and separate works in
+themselves, then this License, and its terms, do not apply to those
+sections when you distribute them as separate works.  But when you
+distribute the same sections as part of a whole which is a work based
+on the Program, the distribution of the whole must be on the terms of
+this License, whose permissions for other licensees extend to the
+entire whole, and thus to each and every part regardless of who wrote it.
+
+Thus, it is not the intent of this section to claim rights or contest
+your rights to work written entirely by you; rather, the intent is to
+exercise the right to control the distribution of derivative or
+collective works based on the Program.
+
+In addition, mere aggregation of another work not based on the Program
+with the Program (or with a work based on the Program) on a volume of
+a storage or distribution medium does not bring the other work under
+the scope of this License.
+
+  3. You may copy and distribute the Program (or a work based on it,
+under Section 2) in object code or executable form under the terms of
+Sections 1 and 2 above provided that you also do one of the following:
+
+    a) Accompany it with the complete corresponding machine-readable
+    source code, which must be distributed under the terms of Sections
+    1 and 2 above on a medium customarily used for software interchange; or,
+
+    b) Accompany it with a written offer, valid for at least three
+    years, to give any third party, for a charge no more than your
+    cost of physically performing source distribution, a complete
+    machine-readable copy of the corresponding source code, to be
+    distributed under the terms of Sections 1 and 2 above on a medium
+    customarily used for software interchange; or,
+
+    c) Accompany it with the information you received as to the offer
+    to distribute corresponding source code.  (This alternative is
+    allowed only for noncommercial distribution and only if you
+    received the program in object code or executable form with such
+    an offer, in accord with Subsection b above.)
+
+The source code for a work means the preferred form of the work for
+making modifications to it.  For an executable work, complete source
+code means all the source code for all modules it contains, plus any
+associated interface definition files, plus the scripts used to
+control compilation and installation of the executable.  However, as a
+special exception, the source code distributed need not include
+anything that is normally distributed (in either source or binary
+form) with the major components (compiler, kernel, and so on) of the
+operating system on which the executable runs, unless that component
+itself accompanies the executable.
+
+If distribution of executable or object code is made by offering
+access to copy from a designated place, then offering equivalent
+access to copy the source code from the same place counts as
+distribution of the source code, even though third parties are not
+compelled to copy the source along with the object code.
+
+  4. You may not copy, modify, sublicense, or distribute the Program
+except as expressly provided under this License.  Any attempt
+otherwise to copy, modify, sublicense or distribute the Program is
+void, and will automatically terminate your rights under this License.
+However, parties who have received copies, or rights, from you under
+this License will not have their licenses terminated so long as such
+parties remain in full compliance.
+
+  5. You are not required to accept this License, since you have not
+signed it.  However, nothing else grants you permission to modify or
+distribute the Program or its derivative works.  These actions are
+prohibited by law if you do not accept this License.  Therefore, by
+modifying or distributing the Program (or any work based on the
+Program), you indicate your acceptance of this License to do so, and
+all its terms and conditions for copying, distributing or modifying
+the Program or works based on it.
+
+  6. Each time you redistribute the Program (or any work based on the
+Program), the recipient automatically receives a license from the
+original licensor to copy, distribute or modify the Program subject to
+these terms and conditions.  You may not impose any further
+restrictions on the recipients' exercise of the rights granted herein.
+You are not responsible for enforcing compliance by third parties to
+this License.
+
+  7. If, as a consequence of a court judgment or allegation of patent
+infringement or for any other reason (not limited to patent issues),
+conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License.  If you cannot
+distribute so as to satisfy simultaneously your obligations under this
+License and any other pertinent obligations, then as a consequence you
+may not distribute the Program at all.  For example, if a patent
+license would not permit royalty-free redistribution of the Program by
+all those who receive copies directly or indirectly through you, then
+the only way you could satisfy both it and this License would be to
+refrain entirely from distribution of the Program.
+
+If any portion of this section is held invalid or unenforceable under
+any particular circumstance, the balance of the section is intended to
+apply and the section as a whole is intended to apply in other
+circumstances.
+
+It is not the purpose of this section to induce you to infringe any
+patents or other property right claims or to contest validity of any
+such claims; this section has the sole purpose of protecting the
+integrity of the free software distribution system, which is
+implemented by public license practices.  Many people have made
+generous contributions to the wide range of software distributed
+through that system in reliance on consistent application of that
+system; it is up to the author/donor to decide if he or she is willing
+to distribute software through any other system and a licensee cannot
+impose that choice.
+
+This section is intended to make thoroughly clear what is believed to
+be a consequence of the rest of this License.
+
+  8. If the distribution and/or use of the Program is restricted in
+certain countries either by patents or by copyrighted interfaces, the
+original copyright holder who places the Program under this License
+may add an explicit geographical distribution limitation excluding
+those countries, so that distribution is permitted only in or among
+countries not thus excluded.  In such case, this License incorporates
+the limitation as if written in the body of this License.
+
+  9. The Free Software Foundation may publish revised and/or new versions
+of the General Public License from time to time.  Such new versions will
+be similar in spirit to the present version, but may differ in detail to
+address new problems or concerns.
+
+Each version is given a distinguishing version number.  If the Program
+specifies a version number of this License which applies to it and "any
+later version", you have the option of following the terms and conditions
+either of that version or of any later version published by the Free
+Software Foundation.  If the Program does not specify a version number of
+this License, you may choose any version ever published by the Free Software
+Foundation.
+
+  10. If you wish to incorporate parts of the Program into other free
+programs whose distribution conditions are different, write to the author
+to ask for permission.  For software which is copyrighted by the Free
+Software Foundation, write to the Free Software Foundation; we sometimes
+make exceptions for this.  Our decision will be guided by the two goals
+of preserving the free status of all derivatives of our free software and
+of promoting the sharing and reuse of software generally.
+
+                            NO WARRANTY
+
+  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
+FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
+OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
+PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
+OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
+TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
+PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
+REPAIR OR CORRECTION.
+
+  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
+WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
+REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
+INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
+OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
+TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
+YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
+PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
+POSSIBILITY OF SUCH DAMAGES.
+
+                     END OF TERMS AND CONDITIONS
+
+            How to Apply These Terms to Your New Programs
+
+  If you develop a new program, and you want it to be of the greatest
+possible use to the public, the best way to achieve this is to make it
+free software which everyone can redistribute and change under these terms.
+
+  To do so, attach the following notices to the program.  It is safest
+to attach them to the start of each source file to most effectively
+convey the exclusion of warranty; and each file should have at least
+the "copyright" line and a pointer to where the full notice is found.
+
+    <one line to give the program's name and a brief idea of what it does.>
+    Copyright (C) <year>  <name of author>
+
+    This program is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 2 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License along
+    with this program; if not, write to the Free Software Foundation, Inc.,
+    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+
+Also add information on how to contact you by electronic and paper mail.
+
+If the program is interactive, make it output a short notice like this
+when it starts in an interactive mode:
+
+    Gnomovision version 69, Copyright (C) year name of author
+    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
+    This is free software, and you are welcome to redistribute it
+    under certain conditions; type `show c' for details.
+
+The hypothetical commands `show w' and `show c' should show the appropriate
+parts of the General Public License.  Of course, the commands you use may
+be called something other than `show w' and `show c'; they could even be
+mouse-clicks or menu items--whatever suits your program.
+
+You should also get your employer (if you work as a programmer) or your
+school, if any, to sign a "copyright disclaimer" for the program, if
+necessary.  Here is a sample; alter the names:
+
+  Yoyodyne, Inc., hereby disclaims all copyright interest in the program
+  `Gnomovision' (which makes passes at compilers) written by James Hacker.
+
+  <signature of Ty Coon>, 1 April 1989
+  Ty Coon, President of Vice
+
+This General Public License does not permit incorporating your program into
+proprietary programs.  If your program is a subroutine library, you may
+consider it more useful to permit linking proprietary applications with the
+library.  If this is what you want to do, use the GNU Lesser General
+Public License instead of this License.
diff --git a/README.txt b/README.txt
index f07b36f..46227d6 100644
--- a/README.txt
+++ b/README.txt
@@ -1,79 +1,64 @@
-DRUPAL SPLASHIFY MODULE
-------------------------
-Maintainers:
-  Chris Roane (http://drupal.org/user/1283000)
-Requires - Drupal 7, Library and jStorage (jQuery plugin)
-License - GPL (see LICENSE)
-
-
-1.0 OVERVIEW
--------------
-Splashify is a full featured splash page module that is designed to be search
-engine friendly. It is originally based on the Drupal 6 Splash module. It
-allows you to specify a page to be displayed anywhere on your site, using one
-of a few different delivery options (redirect, popup window or ColorBox). The
-module also provides options specific to mobile devices.
-
-The main focus of this module is the following:
-- Be search engine friendly by redirecting via JavaScript (when applicable).
-- Allow specific options for mobile devices.
-- Allow different ways in delivering the splash page.
-- Use ColorBox for displaying the splash page in a lightbox.
-- You can have the system pick from a random list of splash pages, have a
-list of splash pages show up in a specified order, display the specified
-text/html in the site template or display the text/html full screen.
-
-All of the features of this module have been confirmed to work in FF, Chrome,
-Safari and IE7 through IE9.
-
-
-2.0 INSTALLATION
------------------
-1. Download and enable the "Libraries" Drupal module. A version of 2.0 or
-higher is required.
-Link: http://drupal.org/project/libraries
-
-2. Download the jStorage library. You will want to put the files either in
-/sites/all/libraries/jstorage/ or /sites/[site_name]/libraries/jstorage/ .
-Below is a direct link to download the zip file.
-Link: https://github.com/andris9/jStorage/zipball/master
-
-2. Download and enable the latest version of the Splashify module.
-Link: http://drupal.org/project/splashify
-
-3. Configure the module. If the system can't find the jStorage library, it will
-display an error.
-Link: /config/system/splashify
-
-4. Verify there are no splashify errors on the Status report page
-(admin/reports/status).
-
-
-2.1 CONFIGURATION
-------------------
-Go to "Configuration" -> "System" -> "Splashify" to find all the configuration
-options.
-
-If you are using the mobile options, you need to make sure to configure all
-of the mobile settings on each tab for the mobile splash to work properly.
-
-
-3.0 PROBLEMS OR FEATURE REQUESTS
----------------------------------
-First make sure an issue doesn't already exist. If it doesn't, create a new
-issue: http://drupal.org/project/issues/splashify
-
-
-4.0 TODO
---------
-- Need to do more in depth mobile browser testing.
-
-
-LAST UPDATED
--------------
-09/09/2012
-
-
-SPONSORS
---------
-This module has been sponsored by The Brick Factory (thebrickfactory.com).
+DRUPAL SPLASHIFY MODULE
+------------------------
+Maintainers:
+  Chris Roane (http://drupal.org/user/1283000)
+Contributors:
+  Drudesk (https://www.drupal.org/drudesk)
+Requires - Drupal 8, Library, Field Group and Colorbox.
+License - GPL (see LICENSE)
+
+
+1.0 OVERVIEW
+-------------
+Splashify is a full featured splash page module that is designed to be search
+engine friendly. It is originally based on the Drupal 6 Splash module. It
+allows you to specify a page to be displayed anywhere on your site, using one
+of a few different delivery options (redirect, popup window or ColorBox).
+
+The main focus of this module is the following:
+- Be search engine friendly by redirecting via JavaScript (when applicable).
+- Allow different ways in delivering the splash page.
+- Use ColorBox for displaying the splash page in a lightbox.
+- You can have a list of splash pages show up in a specified order, display the specified
+text/html in the site template or display the text/html full screen.
+
+All of the features of this module have been confirmed to work in FF, Chrome,
+Safari and IE7 through IE9.
+
+
+2.0 INSTALLATION
+-----------------
+1. Download and enable the "Libraries" Drupal module. 
+Link: http://drupal.org/project/libraries
+
+2. Download and enable the "Colorbox" Drupal module. 
+Link: http://drupal.org/project/colorbox
+
+3. Download and enable the "Field Group" Drupal module. 
+Link: http://drupal.org/project/field_group
+
+4. Download and enable the latest version of the Splashify module.
+Link: http://drupal.org/project/splashify
+
+5. Verify there are no splashify errors on the Status report page
+(admin/reports/status).
+
+
+2.1 CONFIGURATION
+------------------
+Go to "Structure" -> "Splashify group entity list" -> "Add Splashify group entity"
+to create group with configuration for splash.
+
+Go to "Structure" -> "Splashify entity list" -> "Add Splashify entity"
+to create splash.
+
+
+3.0 PROBLEMS OR FEATURE REQUESTS
+---------------------------------
+First make sure an issue doesn't already exist. If it doesn't, create a new
+issue: http://drupal.org/project/issues/splashify
+
+
+SPONSORS
+--------
+This module has been sponsored by The Brick Factory (thebrickfactory.com).
diff --git a/TODO.txt b/TODO.txt
deleted file mode 100644
index 54e3fc9..0000000
--- a/TODO.txt
+++ /dev/null
@@ -1,3 +0,0 @@
-- Test in multiple mobile devices.
-- In admin use '#states' instead of AJAX. See: 
-http://randyfay.com/states
\ No newline at end of file
diff --git a/admin/splashify.admin.how.inc b/admin/splashify.admin.how.inc
deleted file mode 100644
index dcdd5b6..0000000
--- a/admin/splashify.admin.how.inc
+++ /dev/null
@@ -1,117 +0,0 @@
-<?php
-
-/**
- * @file
- * The admin "How" tab.
- *
- * Admin functionality that determines how the splash page shows up to the
- * user.
- */
-
-/**
- * "How" settings tab.
- */
-function splashify_admin_how_form($form, &$form_state) {
-  $form = array();
-
-  $form['description'] = array(
-    '#markup' => '<p>' . t('How should the splash page come up?') . '</p>',
-  );
-
-  // Specify the display mode options for the splash page.
-  $splashify_how_mode_options = array(
-    'redirect' => t('Redirect'),
-    'window' => t('Open in new window'),
-  );
-
-  if (module_exists('colorbox')) {
-    $splashify_how_mode_options['lightbox'] = t('Open in a Lightbox (colorbox)');
-  }
-  else {
-    $colorbox_warning = t('In order to access the lightbox option, you need to have the <a href="@colorbox" target="_blank">Colorbox</a> module installed.', array(
-      '@colorbox' => 'http://drupal.org/project/colorbox',
-    ));
-
-    drupal_set_message($colorbox_warning, 'warning');
-  }
-
-  $form['desktop'] = array(
-    '#type' => 'fieldset',
-    '#title' => t('Desktop Settings'),
-  );
-
-  // Determines how the splash page shows up.
-  $form['desktop']['splashify_how_desktop_mode'] = array(
-    '#type' => 'select',
-    '#title' => t('Splash Display Mode'),
-    '#options' => $splashify_how_mode_options,
-    '#default_value' => variable_get('splashify_how_desktop_mode', 'redirect'),
-    '#description' => t('Determines how the splash page should show up. If you want to use the lightbox option, you need to have the Colorbox module installed.'),
-    '#ajax' => array(
-      'callback' => 'splashify_ajax_how_desktop_mode_callback',
-      'wrapper' => 'how-mode-desktop-size',
-      'method' => 'replace',
-      'effect' => 'slide',
-    ),
-  );
-
-  // Set a variable that is either defined by the selection from the ajax
-  // dropdown menu, or a previously saved value.
-  if (isset($form_state['values']['splashify_how_desktop_mode'])) {
-    $how_desktop_mode_set = $form_state['values']['splashify_how_desktop_mode'];
-  }
-  else {
-    $how_desktop_mode_set = variable_get('splashify_how_desktop_mode', '');
-  }
-
-  $form['desktop']['mode_value']['begin'] = array('#markup' => '<div id="how-mode-desktop-size">');
-
-  // If they specified the redirect option, we want to hide the window size
-  // text field.
-  if ($how_desktop_mode_set != 'redirect' && !empty($how_desktop_mode_set)) {
-    $form['desktop']['mode_value']['splashify_how_desktop_size'] = array(
-      '#type' => 'textfield',
-      '#title' => t('Window/Box size'),
-      '#default_value' => variable_get('splashify_how_desktop_size', ''),
-      '#description' => t('Size (<code>WIDTHxHEIGHT</code>, e.g. 400x300) of the Window or Lightbox.'),
-    );
-  }
-
-  $form['desktop']['mode_value']['end'] = array('#markup' => '</div>');
-
-  $form['mobile'] = array(
-    '#type' => 'fieldset',
-    '#title' => t('Mobile Settings'),
-  );
-
-  // If the mobile splash is enabled, display the mobile options.
-  if (variable_get('splashify_when_mobile', 0) == 1) {
-    // Determines how the splash page shows up.
-    $form['mobile']['splashify_how_mobile_mode'] = array(
-      '#type' => 'select',
-      '#title' => t('Splash Display Mode'),
-      '#options' => $splashify_how_mode_options,
-      '#default_value' => variable_get('splashify_how_mobile_mode', 'redirect'),
-      '#description' => t('How should we load the splash page? Note: Redirect is currently the only option.'),
-
-      // For the time being, the only option we are allowing for mobile
-      // devices is "redirect". We display this so that it is obvious the
-      // method that is used.
-      '#disabled' => TRUE,
-    );
-  }
-  else {
-    $form['mobile']['splashify_how_mobile_mode'] = array(
-      '#markup' => '<p>' . t('In order to specify mobile options, you need to enable the "When: Enable Unique Mobile Splash" option.') . '</p>',
-    );
-  }
-
-  return system_settings_form($form);
-}
-
-/**
- * Ajax callback for the desktop mode dropdown.
- */
-function splashify_ajax_how_desktop_mode_callback($form, &$form_state) {
-  return $form['desktop']['mode_value'];
-}
diff --git a/admin/splashify.admin.what.inc b/admin/splashify.admin.what.inc
deleted file mode 100644
index 12de10e..0000000
--- a/admin/splashify.admin.what.inc
+++ /dev/null
@@ -1,282 +0,0 @@
-<?php
-
-/**
- * @file
- * The admin "What" tab.
- *
- * Admin functionality that determines what should show up as the splash
- * page.
- */
-
-/**
- * "What" settings tab.
- */
-function splashify_admin_what_form($form, &$form_state) {
-  $form = array();
-
-  $form['description'] = array(
-    '#markup' => '<p>' . t('What should show up as the splash page?') . '</p>',
-  );
-
-  $form['desktop'] = array(
-    '#type' => 'fieldset',
-    '#title' => t('Desktop Settings'),
-  );
-
-  $form['desktop']['splashify_what_desktop_mode'] = array(
-    '#type' => 'select',
-    '#title' => t('Splash Mode'),
-    '#options' => array(
-      'random' => t('Pick random path or URL from the list'),
-      'sequence' => t('Pick next path or URL from the list'),
-      'template' => t('Display entered text in the site template'),
-      'fullscreen' => t('Display entered text/HTML full screen'),
-    ),
-    '#default_value' => variable_get('splashify_what_desktop_mode', 'random'),
-    '#description' => t('Determines how the content field below will be used with the splash page.'),
-    '#ajax' => array(
-      'callback' => 'splashify_ajax_what_desktop_mode_callback',
-      'wrapper' => 'what-mode-desktop-value',
-      'method' => 'replace',
-      'effect' => 'fade',
-    ),
-  );
-
-  // Set a variable that is either defined by the selection from the ajax
-  // dropdown menu, or a previously saved value.
-  if (isset($form_state['values']['splashify_what_desktop_mode'])) {
-    $what_desktop_mode_set = $form_state['values']['splashify_what_desktop_mode'];
-  }
-  else {
-    $what_desktop_mode_set = variable_get('splashify_what_desktop_mode', '');
-  }
-
-  $splashify_what_desktop_content = variable_get('splashify_what_desktop_content', '');
-
-  $form['desktop']['mode_value']['begin'] = array('#markup' => '<div id="what-mode-desktop-value">');
-
-  // If they specified the template or fullscreen option, we want to hide the
-  // window size text field.
-  if ($what_desktop_mode_set == 'template' || $what_desktop_mode_set == 'fullscreen') {
-    // Display a format field.
-    $form['desktop']['mode_value']['splashify_what_desktop_content'] = array(
-      '#type' => 'text_format',
-      '#title' => t('Content'),
-      '#default_value' => (is_array($splashify_what_desktop_content)) ? $splashify_what_desktop_content['value'] : '',
-      '#format' => (is_array($splashify_what_desktop_content)) ? $splashify_what_desktop_content['format'] : '',
-      '#description' => t('Enter the HTML you want to use on the page.'),
-    );
-
-    // If the template mode is selected, allow them to set a page title value.
-    if ($what_desktop_mode_set == 'template') {
-      $form['desktop']['mode_value']['splashify_what_desktop_pagetitle'] = array(
-        '#type' => 'textfield',
-        '#title' => t('Page Title'),
-        '#default_value' => variable_get('splashify_what_desktop_pagetitle', ''),
-      );
-    }
-  }
-  else {
-    // If this value is an array, the mode was changed and we want to empty
-    // out the value.
-    if (is_array($splashify_what_desktop_content)) {
-      $splashify_what_desktop_content = '';
-    }
-
-    // Display a textarea field.
-    $form['desktop']['mode_value']['splashify_what_desktop_content'] = array(
-      '#type' => 'textarea',
-      '#title' => t('Paths or Url Values'),
-      '#default_value' => $splashify_what_desktop_content,
-      '#description' => t('Enter the site paths or URLs (one on each line) to use. You can use either the drupal source path, or the alias. <br />To open a non-Drupal path, use an absolute URL, i.e. http://example.com/splash.html'),
-    );
-  }
-
-  $form['desktop']['mode_value']['end'] = array('#markup' => '</div>');
-
-
-  /*
-   * Mobile settings.
-   */
-
-  $form['mobile'] = array(
-    '#type' => 'fieldset',
-    '#title' => t('Mobile Settings'),
-  );
-
-  // If the mobile splash is enabled, display the mobile options.
-  if (variable_get('splashify_when_mobile', 0) == 1) {
-    $form['mobile']['splashify_what_mobile_mode'] = array(
-      '#type' => 'select',
-      '#title' => t('Splash Mode'),
-      '#options' => array(
-        'random' => t('Pick random path or URL from the list'),
-        'sequence' => t('Pick next path or URL from the list'),
-        'template' => t('Display entered text in the site template'),
-        'fullscreen' => t('Display entered text/HTML full screen'),
-      ),
-      '#default_value' => variable_get('splashify_what_mobile_mode', 'random'),
-      '#description' => t('Determines how the content field below will be used with the splash page.'),
-      '#ajax' => array(
-        'callback' => 'splashify_ajax_what_mobile_mode_callback',
-        'wrapper' => 'what-mode-mobile-value',
-        'method' => 'replace',
-        'effect' => 'fade',
-      ),
-    );
-
-    // Set a variable that is either defined by the selection from the ajax
-    // dropdown menu, or a previously saved value.
-    if (isset($form_state['values']['splashify_what_mobile_mode'])) {
-      $what_mobile_mode_set = $form_state['values']['splashify_what_mobile_mode'];
-    }
-    else {
-      $what_mobile_mode_set = variable_get('splashify_what_mobile_mode', '');
-    }
-
-    $splashify_what_mobile_content = variable_get('splashify_what_mobile_content', '');
-
-    $form['mobile']['mode_value']['begin'] = array('#markup' => '<div id="what-mode-mobile-value">');
-
-    // If they specified the template or fullscreen option, we want to hide the
-    // window size text field.
-    if ($what_mobile_mode_set == 'template' || $what_mobile_mode_set == 'fullscreen') {
-      $form['mobile']['mode_value']['splashify_what_mobile_content'] = array(
-        '#type' => 'text_format',
-        '#title' => t('Content'),
-        '#default_value' => (is_array($splashify_what_mobile_content)) ? $splashify_what_mobile_content['value'] : '',
-        '#format' => (is_array($splashify_what_mobile_content)) ? $splashify_what_mobile_content['format'] : '',
-        '#description' => t('Text to show or paths/URLs (one on each line) to use.  To open a non-Drupal path, use an absolute URL, i.e. http://example.com/splash.html'),
-      );
-
-      // If the template mode is selected, allow them to set a page title value.
-      if ($what_mobile_mode_set == 'template') {
-        $form['mobile']['mode_value']['splashify_what_mobile_pagetitle'] = array(
-          '#type' => 'textfield',
-          '#title' => t('Page Title'),
-          '#default_value' => variable_get('splashify_what_mobile_pagetitle', ''),
-        );
-      }
-    }
-    else {
-      // If this value is an array, the mode was changed and we want to empty
-      // out the value.
-      if (is_array($splashify_what_desktop_content)) {
-        $splashify_what_desktop_content = '';
-      }
-
-      // Display a textarea field.
-      $form['mobile']['mode_value']['splashify_what_mobile_content'] = array(
-        '#type' => 'textarea',
-        '#title' => t('Paths or Url Values'),
-        '#default_value' => $splashify_what_mobile_content,
-        '#description' => t('Enter the site paths or URLs (one on each line) to use. You can use either the drupal source path, or the alias. <br />To open a non-Drupal path, use an absolute URL, i.e. http://example.com/splash.html'),
-      );
-    }
-
-    $form['mobile']['mode_value']['end'] = array('#markup' => '</div>');
-
-  }
-  else {
-    $form['mobile']['splashify_what_mobile_mode'] = array(
-      '#markup' => '<p>' . t('In order to specify mobile options, you need to enable the "When: Enable Unique Mobile Splash" option.') . '</p>',
-    );
-  }
-
-  $form['#validate'][] = 'splashify_admin_what_form_validate';
-  $form['#submit'][] = 'splashify_admin_what_form_submit';
-  return system_settings_form($form);
-}
-
-/**
- * Implements form validation handler.
- */
-function splashify_admin_what_form_validate($form, &$form_state) {
-  // If they entered paths, make sure the path values are valid.
-  $desktop_mode = $form_state['values']['splashify_what_desktop_mode'];
-  if ($desktop_mode == 'random' || $desktop_mode == 'sequence') {
-    splashify_what_paths_check('splashify_what_desktop_content', $form_state['values']['splashify_what_desktop_content']);
-  }
-
-  if (isset($form_state['values']['splashify_what_mobile_mode'])) {
-    $mobile_mode = $form_state['values']['splashify_what_mobile_mode'];
-    if ($mobile_mode == 'random' || $mobile_mode == 'sequence') {
-      splashify_what_paths_check('splashify_what_mobile_content', $form_state['values']['splashify_what_mobile_content']);
-    }
-  }
-}
-
-/**
- * Implements form submit handler.
- */
-function splashify_admin_what_form_submit($form, &$form_state) {
-  // Clear out the title value if we aren't using the template option.
-  if ($form_state['values']['splashify_what_desktop_mode'] != 'template') {
-    variable_set('splashify_what_desktop_pagetitle', '');
-  }
-}
-
-/**
- * Ajax callback for the desktop mode dropdown.
- *
- * The $form array element that is returned is the updated field that should
- * be displayed.
- */
-function splashify_ajax_what_desktop_mode_callback($form, &$form_state) {
-  return $form['desktop']['mode_value'];
-}
-
-/**
- * Ajax callback for the mobile mode dropdown.
- *
- * The $form array element that is returned is the updated field that should
- * be displayed.
- */
-function splashify_ajax_what_mobile_mode_callback($form, &$form_state) {
-  return $form['mobile']['mode_value'];
-}
-
-/**
- * Validate the what:paths field.
- *
- * We put this in a function so it can handle both the desktop and mobile
- * settings. This assumes that each path in $paths is separated by a new line
- * character. We also assume $paths cannot be blank.
- */
-function splashify_what_paths_check($field, $paths) {
-  if (empty($paths)) {
-    form_set_error($field, t('You must enter at least one path.'));
-    return;
-  }
-
-  // Make sure each path is valid.
-  $what_paths = preg_split('/[\n\r]+/', $paths);
-  $errors = array();
-  foreach ($what_paths as $path) {
-    // If this is a valid Drupal path.
-    if (drupal_valid_path($path)) {
-      continue;
-    }
-
-    // If this path is an alias, we know this is a valid path.
-    // TODO: This ALWAYS returns a string. Need to invalidate somehow.
-    $url = url($path, array('alias' => TRUE));
-    if ($url) {
-      continue;
-    }
-
-    // Now check if this is a url value.
-    if (substr($path, 0, 7) == 'http://') {
-      continue;
-    }
-
-    // This path is not an alias or the source url.
-    $errors[] .= t('The path "@path" is not valid.', array('@path' => $path));;
-  }
-
-  // Since there could be multiple errors for this one field, we want to
-  // break each error into a separate line.
-  if (count($errors) > 0) {
-    form_set_error($field, implode('<br />', $errors));
-  }
-}
diff --git a/admin/splashify.admin.when.inc b/admin/splashify.admin.when.inc
deleted file mode 100644
index 7c19e78..0000000
--- a/admin/splashify.admin.when.inc
+++ /dev/null
@@ -1,128 +0,0 @@
-<?php
-
-/**
- * @file
- * The admin "When" tab.
- *
- * Admin functionality that determines when the splash page should show up
- * on the website.
- */
-
-/**
- * "When" settings tab.
- */
-function splashify_admin_when_form($form, &$form_state) {
-  $form = array();
-
-  $form['description'] = array(
-    '#markup' => '<p>' . t('When should the splash page show up? This is also where the main mobile option is defined.') . '</p>',
-  );
-
-  $form['splashify_when_anonymous'] = array(
-    '#type' => 'checkbox',
-    '#title' => t('Only show to anonymous users.'),
-    '#default_value' => variable_get('splashify_when_anonymous', FALSE),
-  );
-
-  // Add control to disable referrer check
-  // @see splashify_init.js
-  $form['disable_referrer_check'] = array(
-    '#type' => 'checkbox',
-    '#title' => t('Disable referrer check'),
-    '#default_value' => variable_get('disable_referrer_check', 0),
-    '#description' => t('Show splash even when page was loaded from an internal page.'),
-  );
-
-  $form['desktop'] = array(
-    '#type' => 'fieldset',
-    '#title' => t('Desktop Settings'),
-  );
-
-  $form['desktop']['splashify_when_desktop_frequency'] = array(
-    '#type' => 'select',
-    '#title' => t('How often should visitors see the splash page?'),
-    '#default_value' => variable_get('splashify_when_desktop_frequency', 'never'),
-    '#options' => array(
-      'never' => t('Never (off)'),
-      'always' => t('Always'),
-      'once' => t('Once'),
-      'daily' => t('Daily'),
-      'weekly' => t('Weekly'),
-    ),
-  );
-
-  $form['mobile'] = array(
-    '#type' => 'fieldset',
-    '#title' => t('Mobile Settings'),
-  );
-
-  $form['mobile']['splashify_when_mobile'] = array(
-    '#type' => 'checkbox',
-    '#title' => t('Enable Unique Mobile Splash'),
-    '#default_value' => variable_get('splashify_when_mobile', 0),
-    '#disabled' => FALSE,
-    '#ajax' => array(
-      'callback' => 'splashify_ajax_when_mobile_callback',
-      'wrapper' => 'when-mobile-settings',
-      'method' => 'replace',
-      'effect' => 'slide',
-    ),
-  );
-
-  // Set a variable that is either defined by the ajax checkbox, or a
-  // previously saved value.
-  if (isset($form_state['values']['splashify_when_mobile'])) {
-    $when_mobile_set = $form_state['values']['splashify_when_mobile'];
-  }
-  else {
-    $when_mobile_set = variable_get('splashify_when_mobile', 0);
-  }
-
-  $form['mobile']['options']['begin'] = array('#markup' => '<div id="when-mobile-settings">');
-
-  // If the mobile splash is enabled, display the mobile options.
-  if ($when_mobile_set == 1) {
-    $form['mobile']['options']['splashify_when_mobile_frequency'] = array(
-      '#type' => 'select',
-      '#title' => t('How often should mobile visitors see the mobile splash page?'),
-      '#default_value' => variable_get('splashify_when_mobile_frequency', 'never'),
-      '#options' => array(
-        'never' => t('Never (off)'),
-        'always' => t('Always'),
-        'once' => t('Once'),
-        'daily' => t('Daily'),
-        'weekly' => t('Weekly'),
-      ),
-    );
-
-    $form['mobile']['options']['splashify_when_mobile_test'] = array(
-      '#type' => 'checkbox',
-      '#title' => t('Test Mobile'),
-      '#default_value' => variable_get('splashify_when_mobile_test', 0),
-      '#description' => t('Turn this option on to force the mobile settings to take affect so you can test from your desktop browser.'),
-    );
-  }
-
-  $form['mobile']['options']['end'] = array('#markup' => '</div>');
-
-  $form['#submit'][] = 'splashify_admin_when_form_submit';
-  return system_settings_form($form);
-}
-
-/**
- * Implements form submit handler.
- */
-function splashify_admin_when_form_submit($form, &$form_state) {
-  if ($form_state['values']['splashify_when_mobile'] != 1) {
-    // Unset these values, if the mobile option is disabled.
-    variable_set('splashify_when_mobile_frequency', 'never');
-    variable_set('splashify_when_mobile_test', 0);
-  }
-}
-
-/**
- * Ajax callback for the "enable mobile" checkbox.
- */
-function splashify_ajax_when_mobile_callback($form, &$form_state) {
-  return $form['mobile']['options'];
-}
diff --git a/admin/splashify.admin.where.inc b/admin/splashify.admin.where.inc
deleted file mode 100644
index 3354bc2..0000000
--- a/admin/splashify.admin.where.inc
+++ /dev/null
@@ -1,225 +0,0 @@
-<?php
-
-/**
- * @file
- * The admin "Where" tab.
- *
- * Admin functionality that determines where the splash page should show up
- * on the website.
- */
-
-/**
- * "Where" settings tab.
- */
-function splashify_admin_where_form($form, &$form_state) {
-  $form = array();
-
-  $form['description'] = array(
-    '#markup' => '<p>' . t('Where should the splash page come up?') . '</p>',
-  );
-
-  $form['desktop'] = array(
-    '#type' => 'fieldset',
-    '#title' => t('Desktop Settings'),
-  );
-
-  $page_options = array(
-    'home' => t('Front Page'),
-    'all' => t('All Pages'),
-    'list' => t('List Pages'),
-  );
-
-  $form['desktop']['splashify_where_desktop_page'] = array(
-    '#type' => 'select',
-    '#title' => t('Specify where the splash page should show up:'),
-    '#default_value' => variable_get('splashify_where_desktop_page', 'home'),
-    '#options' => $page_options,
-    '#description' => t('Define where the splash page should show up.'),
-    '#ajax' => array(
-      'callback' => 'splashify_ajax_where_desktop_page_callback',
-      'wrapper' => 'where-desktop-page-value',
-      'method' => 'replace',
-      'effect' => 'slide',
-    ),
-  );
-
-  // Set a variable that is either defined by the selection from the ajax
-  // dropdown, or a previously saved value.
-  if (isset($form_state['values']['splashify_where_desktop_page'])) {
-    $where_desktop_list_set = $form_state['values']['splashify_where_desktop_page'];
-  }
-  else {
-    $where_desktop_list_set = variable_get('splashify_where_desktop_page', '');
-  }
-
-  $form['desktop']['options']['begin'] = array('#markup' => '<div id="where-desktop-page-value">');
-
-  // If they specified the redirect option, we want to hide the window size
-  // text field.
-  if ($where_desktop_list_set == 'list') {
-    $form['desktop']['options']['splashify_where_desktop_listpages'] = array(
-      '#type' => 'textarea',
-      '#title' => t('List Pages'),
-      '#default_value' => variable_get('splashify_where_desktop_listpages', ''),
-      '#description' => t('Enter the paths of the pages where you want the splash page to show up (one per line).<br />The path needs to be the original source url and NOT the alias for the page. Example: node/12'),
-    );
-  }
-
-  $form['desktop']['options']['end'] = array('#markup' => '</div>');
-
-  $form['desktop']['splashify_where_desktop_opposite'] = array(
-    '#type' => 'checkbox',
-    '#title' => t('Show the splash page on every page except for the option selected above.'),
-    '#default_value' => variable_get('splashify_where_desktop_opposite', FALSE),
-  );
-
-  $form['mobile'] = array(
-    '#type' => 'fieldset',
-    '#title' => t('Mobile Settings'),
-  );
-
-  // If the mobile splash is enabled, display the mobile options.
-  if (variable_get('splashify_when_mobile', 0) == 1) {
-    $form['mobile']['splashify_where_mobile_page'] = array(
-      '#type' => 'select',
-      '#title' => t('Specify where the splash page should show up:'),
-      '#default_value' => variable_get('splashify_where_mobile_page', 'home'),
-      '#options' => $page_options,
-      '#ajax' => array(
-        'callback' => 'splashify_ajax_where_mobile_page_callback',
-        'wrapper' => 'where-mobile-page-value',
-        'method' => 'replace',
-        'effect' => 'slide',
-      ),
-    );
-
-    // Set a variable that is either defined by the selection from the ajax
-    // drop down, or a previously saved value.
-    if (isset($form_state['values']['splashify_where_mobile_page'])) {
-      $where_mobile_list_set = $form_state['values']['splashify_where_mobile_page'];
-    }
-    else {
-      $where_mobile_list_set = variable_get('splashify_where_mobile_page', '');
-    }
-
-    $form['mobile']['options']['begin'] = array('#markup' => '<div id="where-mobile-page-value">');
-
-    if ($where_mobile_list_set == 'list') {
-      $form['mobile']['options']['splashify_where_mobile_listpages'] = array(
-        '#type' => 'textarea',
-        '#title' => t('List Pages'),
-        '#default_value' => variable_get('splashify_where_mobile_listpages', ''),
-        '#description' => t('Enter the paths of the pages where you want the splash page to show up (one per line).<br />The path needs to be the original source url and NOT the alias for the page. Example: node/12'),
-      );
-    }
-
-    $form['mobile']['options']['end'] = array('#markup' => '</div>');
-
-    $form['mobile']['splashify_where_mobile_opposite'] = array(
-      '#type' => 'checkbox',
-      '#title' => t('Show the splash page on every page except for the option selected above.'),
-      '#default_value' => variable_get('splashify_where_mobile_opposite', FALSE),
-    );
-
-  }
-  else {
-    $form['mobile']['splashify_what_mobile_mode'] = array(
-      '#markup' => '<p>' . t('In order to specify mobile options, you need to enable the "When: Enable Unique Mobile Splash" option.') . '</p>',
-    );
-  }
-
-
-  $form['#validate'][] = 'splashify_admin_where_form_validate';
-  $form['#submit'][] = 'splashify_admin_where_form_submit';
-  return system_settings_form($form);
-}
-
-/**
- * Implements form validation handler.
- */
-function splashify_admin_where_form_validate($form, &$form_state) {
-  // If they entered paths, make sure the path values are valid.
-  if ($form_state['values']['splashify_where_desktop_page'] == 'list') {
-    splashify_where_paths_check('splashify_where_desktop_listpages', $form_state['values']['splashify_where_desktop_listpages']);
-  }
-
-  if (isset($form_state['values']['splashify_where_mobile_page'])) {
-    if ($form_state['values']['splashify_where_mobile_page'] == 'list') {
-      splashify_where_paths_check('splashify_where_mobile_listpages', $form_state['values']['splashify_where_mobile_listpages']);
-    }
-  }
-
-  // If they have the opposite option checked, the "All" option should not be
-  // selected.
-  if (isset($form_state['values']['splashify_where_desktop_opposite'])) {
-    if ($form_state['values']['splashify_where_desktop_page'] == 'all' && $form_state['values']['splashify_where_desktop_opposite']) {
-      form_set_error('splashify_where_desktop_page', 'The "All" option cannot be selected when checking the "Opposite" option.');
-    }
-  }
-
-  if (isset($form_state['values']['splashify_where_mobile_opposite'])) {
-    if ($form_state['values']['splashify_where_mobile_page'] == 'all' && $form_state['values']['splashify_where_mobile_opposite']) {
-      form_set_error('splashify_where_mobile_page', 'The "All" option cannot be selected when checking the "Opposite" option.');
-    }
-  }
-}
-
-/**
- * Implements form submit handler.
- */
-function splashify_admin_where_form_submit($form, &$form_state) {
-  if ($form_state['values']['splashify_where_desktop_page'] != 'list') {
-    // Unset the listpages variable (desktop), if the list pages option is not
-    // set.
-    variable_set('splashify_where_desktop_listpages', '');
-  }
-
-  if (isset($form_state['values']['splashify_where_mobile_page'])) {
-    if ($form_state['values']['splashify_where_mobile_page'] != 'list') {
-      // Unset the listpages variable (mobile), if the list pages option is not
-      // set.
-      variable_set('splashify_where_mobile_listpages', '');
-    }
-  }
-}
-
-/**
- * Ajax callback for the "which page" select for desktop.
- */
-function splashify_ajax_where_desktop_page_callback($form, &$form_state) {
-  return $form['desktop']['options'];
-}
-
-/**
- * Ajax callback for the "which page" select for mobile devices.
- */
-function splashify_ajax_where_mobile_page_callback($form, &$form_state) {
-  return $form['mobile']['options'];
-}
-
-/**
- * Validate the where:list:paths field.
- *
- * We put this in a function so it can handle both the desktop and mobile
- * settings. This assumes that each path in $paths is separated by a new line
- * character.
- */
-function splashify_where_paths_check($field, $paths) {
-  $what_paths = preg_split('/[\n\r]+/', $paths);
-  $errors = array();
-  foreach ($what_paths as $path) {
-    // If this path is a source url, we know this is a valid path.
-    if (drupal_valid_path($path)) {
-      continue;
-    }
-
-    // This path is not an alias or the source url.
-    $errors[] .= t('The path "@path" is not a valid source page. This path cannot be an alias.', array('@path' => $path));
-  }
-
-  // Since there could be multiple errors for this one field, we want to
-  // break each error into a separate line.
-  if (count($errors) > 0) {
-    form_set_error($field, implode('<br />', $errors));
-  }
-}
diff --git a/config/install/core.entity_form_display.splashify_group_entity.splashify_group_entity.default.yml b/config/install/core.entity_form_display.splashify_group_entity.splashify_group_entity.default.yml
new file mode 100644
index 0000000..3dabb53
--- /dev/null
+++ b/config/install/core.entity_form_display.splashify_group_entity.splashify_group_entity.default.yml
@@ -0,0 +1,60 @@
+langcode: en
+status: true
+dependencies:
+  module:
+    - field_group
+    - splashify
+third_party_settings:
+  field_group:
+    group_whe:
+      children:
+        - field_show
+        - field_disable_check_referrer
+        - field_often
+        - field_restrict
+        - field_roles
+        - group_roles
+      parent_name: ''
+      weight: 1
+      label: 'When should the splash page show up?'
+      format_type: details
+      format_settings:
+        label: 'When should the splash page show up?'
+        open: true
+        required_fields: true
+        id: ''
+        classes: ''
+    group_where:
+      children:
+        - field_where
+        - field_list_pages
+        - field_opposite
+      parent_name: ''
+      weight: 2
+      label: 'Where should the splash page come up?'
+      format_type: details
+      format_settings:
+        label: 'Where should the splash page come up?'
+        open: true
+        required_fields: true
+        id: ''
+        classes: ''
+    group_how:
+      children:
+        - field_mode
+        - field_splash_mode
+        - field_size
+      parent_name: ''
+      weight: 3
+      label: 'How should the splash page come up?'
+      format_type: details
+      format_settings:
+        label: 'How should the splash page come up?'
+        open: true
+        required_fields: true
+        id: ''
+        classes: ''
+id: splashify_group_entity.splashify_group_entity.default
+targetEntityType: splashify_group_entity
+bundle: splashify_group_entity
+mode: default
diff --git a/css/splashify.css b/css/splashify.css
new file mode 100644
index 0000000..9be2462
--- /dev/null
+++ b/css/splashify.css
@@ -0,0 +1,33 @@
+/* ==========================================================================
+   Splash page component
+   ========================================================================== */
+.splash-wrapper {
+    background-color: #FFF;
+    background-size: cover;
+    position: absolute;
+    top: 0;
+    height: 0;
+    left: 0;
+    width: 100%;
+    display: none;
+    overflow: hidden;
+    z-index: 100;
+}
+
+.splash-wrapper div {
+    z-index: 200;
+    position: relative;
+}
+
+.splash-inner {
+    text-align: center;
+    padding: 0 1.5rem;
+}
+
+@media screen and (min-width: 1025px) {
+    .splash-inner {
+        margin: 0 auto;
+        padding: 0;
+        width: 750px;
+    }
+}
diff --git a/js/jquery.json-2.3.min.js b/js/jquery.json-2.3.min.js
deleted file mode 100644
index 4e4e386..0000000
--- a/js/jquery.json-2.3.min.js
+++ /dev/null
@@ -1,23 +0,0 @@
-
-(function($){var escapeable=/["\\\x00-\x1f\x7f-\x9f]/g,meta={'\b':'\\b','\t':'\\t','\n':'\\n','\f':'\\f','\r':'\\r','"':'\\"','\\':'\\\\'};$.toJSON=typeof JSON==='object'&&JSON.stringify?JSON.stringify:function(o){if(o===null){return'null';}
-var type=typeof o;if(type==='undefined'){return undefined;}
-if(type==='number'||type==='boolean'){return''+o;}
-if(type==='string'){return $.quoteString(o);}
-if(type==='object'){if(typeof o.toJSON==='function'){return $.toJSON(o.toJSON());}
-if(o.constructor===Date){var month=o.getUTCMonth()+1,day=o.getUTCDate(),year=o.getUTCFullYear(),hours=o.getUTCHours(),minutes=o.getUTCMinutes(),seconds=o.getUTCSeconds(),milli=o.getUTCMilliseconds();if(month<10){month='0'+month;}
-if(day<10){day='0'+day;}
-if(hours<10){hours='0'+hours;}
-if(minutes<10){minutes='0'+minutes;}
-if(seconds<10){seconds='0'+seconds;}
-if(milli<100){milli='0'+milli;}
-if(milli<10){milli='0'+milli;}
-return'"'+year+'-'+month+'-'+day+'T'+
-hours+':'+minutes+':'+seconds+'.'+milli+'Z"';}
-if(o.constructor===Array){var ret=[];for(var i=0;i<o.length;i++){ret.push($.toJSON(o[i])||'null');}
-return'['+ret.join(',')+']';}
-var name,val,pairs=[];for(var k in o){type=typeof k;if(type==='number'){name='"'+k+'"';}else if(type==='string'){name=$.quoteString(k);}else{continue;}
-type=typeof o[k];if(type==='function'||type==='undefined'){continue;}
-val=$.toJSON(o[k]);pairs.push(name+':'+val);}
-return'{'+pairs.join(',')+'}';}};$.evalJSON=typeof JSON==='object'&&JSON.parse?JSON.parse:function(src){return eval('('+src+')');};$.secureEvalJSON=typeof JSON==='object'&&JSON.parse?JSON.parse:function(src){var filtered=src.replace(/\\["\\\/bfnrtu]/g,'@').replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,']').replace(/(?:^|:|,)(?:\s*\[)+/g,'');if(/^[\],:{}\s]*$/.test(filtered)){return eval('('+src+')');}else{throw new SyntaxError('Error parsing JSON, source is not valid.');}};$.quoteString=function(string){if(string.match(escapeable)){return'"'+string.replace(escapeable,function(a){var c=meta[a];if(typeof c==='string'){return c;}
-c=a.charCodeAt();return'\\u00'+Math.floor(c/16).toString(16)+(c%16).toString(16);})+'"';}
-return'"'+string+'"';};})(jQuery);
\ No newline at end of file
diff --git a/js/splashify_full_screen.js b/js/splashify_full_screen.js
new file mode 100644
index 0000000..ca787d7
--- /dev/null
+++ b/js/splashify_full_screen.js
@@ -0,0 +1,54 @@
+(function ($) {
+  Drupal.behaviors.splashifyBehavior.full_screen =
+    function (context, settings) {
+      var splash_height = $(window).height();
+
+      $('#splashify', context).once('splashify_open').each(function () {
+        var $splash = $(this);
+
+        // Get the height of the div. Set it as a custom attribute.
+        // Update the height to 0 and then show the div.
+        $('body').css('margin-top', splash_height);
+        $splash.attr('originalheight', splash_height + 'px');
+        $splash.css('position', 'absolute');
+        $splash.css('display', 'block');
+
+        // Open the splash.
+        openSplash($splash);
+
+        // Track scroll position to destroy splash
+        $(context).once('splashify_scroll').on('scroll.splash', function () {
+          var $object = $(this);
+          var scroll_position = $object.scrollTop();
+          if (scroll_position >= splash_height) {
+            $object.scrollTop(0);
+            // Destroy the splash div...they scrolled passed it.
+            var $body = $('body');
+            $body.removeClass('splash-active');
+            $body.css('margin-top', 0);
+            $('#splashify', context).css('height', 0);
+            $object.off('scroll.splash');
+          }
+        });
+      });
+
+      // Open the splash div.
+      function openSplash($splash) {
+        var $body = $('body');
+        $body.addClass('splash-active');
+        $body.css('margin-top', $splash.attr('originalheight'));
+        $('.splash-wrapper').css('height', $splash.attr('originalheight'));
+        window.scrollTo(0, 0);
+      }
+
+      // Close the splash div.
+      function closeSplash() {
+        var $body = $('body');
+        $body.removeClass('splash-active');
+        $body.css('margin-top', 0);
+        $('.splash-wrapper').css('height', 0);
+      }
+
+    }
+
+})(jQuery);
diff --git a/js/splashify_init.js b/js/splashify_init.js
index c84865d..d2330f3 100644
--- a/js/splashify_init.js
+++ b/js/splashify_init.js
@@ -1,87 +1,27 @@
-jQuery(document).ready(function($) {
-  var jsmode = Drupal.settings.splashify.js_mode;
-
-  // Prevents a flicker before the splash page shows up.
-  if (jsmode == 'redirect') {
-    hidepage();
-  }
-
-  var now = new Date();
-  var nowtimeSeconds = now.getTime() / 1000;
-  var referrer = document.referrer + '';
-  var hostname = window.location.hostname + '';
-  var splash = $.jStorage.get("splash", 0);
-  var splashalways = Drupal.settings.splashify.js_splash_always;
-  var what_urls = Drupal.settings.splashify.js_mode_settings.urls;
-  var referrer_check = Drupal.settings.splashify.js_disable_referrer_check;
-
-  // Stop the splash page from show up if on the splash page. Also prevent
-  // the splash from showing up from internal links (dependent on the
-  // referrer check settings).
-  if ((referrer.search(hostname) != -1 && !referrer_check) || jQuery.inArray(window.location.pathname, what_urls) > -1) {
-    showpage();
-    return;
-  }
-
-  // Determine if we should display the splash page.
-  var displaysplash = false;
-  if (!splash || splash < nowtimeSeconds || splashalways=='1') {
-    displaysplash = true;
-  }
-
-  // Display the splash page?
-  if(displaysplash){
-    var expireAfter = Drupal.settings.splashify.js_expire_after;
-    var last_url = $.jStorage.get('splashlasturl', '');
-    var url = '';
-
-    // Set when the splash variable should expire next.
-    $.jStorage.set("splash", nowtimeSeconds + expireAfter);
-
-    // Determine the url we are working with, which is based on the mode.
-    if(Drupal.settings.splashify.js_mode_settings.system_splash != ''){
-      // Display the system splash page.
-      url = Drupal.settings.splashify.js_mode_settings.system_splash;
-    } else if(Drupal.settings.splashify.js_mode_settings.mode == 'sequence'){
-      // Display the splash pages in sequence.
-      var new_url_index = 0;
-      var last_url_index = jQuery.inArray(last_url, what_urls);
-      if(last_url_index > -1 && last_url_index+1 < Drupal.settings.splashify.js_mode_settings.total_urls){
-        new_url_index = last_url_index + 1;
+(function ($) {
+  Drupal.behaviors.splashifyBehavior = {
+    attach: function (context, settings) {
+      var jsmode = settings.splashify.mode,
+        referrer = document.referrer + '',
+        hostname = window.location.hostname + '',
+        referrer_check = settings.splashify.refferer_check;
+
+      // This updates the referer string by taking out the url parameter from the
+      // url...which is included from google search results (as an example).
+      if (referrer.indexOf('?') != -1) {
+        referrer = referrer.substr(0, referrer.indexOf('?'));
+      }
+      // Stop the splash page from show up if on the splash page. Also prevent
+      // the splash from showing up from internal links (dependent on the
+      // referrer check settings).
+      if ((referrer.search(hostname) != -1 && referrer_check)) {
+        return;
       }
-      url = what_urls[new_url_index];
-    } else if(Drupal.settings.splashify.js_mode_settings.mode == 'random'){
-      // Display a random splash page.
-      var new_url_index = Math.floor(Math.random() * Drupal.settings.splashify.js_mode_settings.total_urls);
-      url = what_urls[new_url_index];
-    }
-
-    $.jStorage.set('splashlasturl', url);
 
-    // Display the splash page.
-    if(jsmode == 'redirect'){
-      // Redirect.
-      window.location.replace(url);
-    } else if(jsmode == 'colorbox'){
-      // Open a ColorBox.
-      $.colorbox({
-        transition:'elastic',
-        iframe:true,
-        href:url,
-        width:Drupal.settings.splashify.js_mode_settings.size_width,
-        height:Drupal.settings.splashify.js_mode_settings.size_height
-      });
-    } else if(jsmode == 'window'){
-      // Open a popup window.
-      window.open(url, 'splash', Drupal.settings.splashify.js_mode_settings.size);
+      if (typeof Drupal.behaviors.splashifyBehavior[jsmode] != 'undefined') {
+        Drupal.behaviors.splashifyBehavior[jsmode](context, settings);
+      }
     }
   }
-});
-
-function showpage() {
-  jQuery('html').show();
-}
 
-function hidepage() {
-  jQuery('html').hide();
-}
+})(jQuery);
diff --git a/js/splashify_init_min.js b/js/splashify_init_min.js
deleted file mode 100644
index db86baf..0000000
--- a/js/splashify_init_min.js
+++ /dev/null
@@ -1 +0,0 @@
-jQuery(document).ready(function($){var jsmode=Drupal.settings.splashify.js_mode;if(jsmode=='redirect'){hidepage()}var now=new Date();var nowtimeSeconds=now.getTime()/1000;var referrer=document.referrer+'';var hostname=window.location.hostname+'';var splash=$.jStorage.get("splash",0);var splashalways=Drupal.settings.splashify.js_splash_always;var what_urls=Drupal.settings.splashify.js_mode_settings.urls;var referrer_check=Drupal.settings.splashify.js_disable_referrer_check;if((referrer.search(hostname)!=-1&&!referrer_check)||jQuery.inArray(window.location.pathname,what_urls)>-1){showpage();return}var displaysplash=false;if(!splash||splash<nowtimeSeconds||splashalways=='1'){displaysplash=true}if(displaysplash){var expireAfter=Drupal.settings.splashify.js_expire_after;var last_url=$.jStorage.get('splashlasturl','');var url='';$.jStorage.set("splash",nowtimeSeconds+expireAfter);if(Drupal.settings.splashify.js_mode_settings.system_splash!=''){url=Drupal.settings.splashify.js_mode_settings.system_splash}else if(Drupal.settings.splashify.js_mode_settings.mode=='sequence'){var new_url_index=0;var last_url_index=jQuery.inArray(last_url,what_urls);if(last_url_index>-1&&last_url_index+1<Drupal.settings.splashify.js_mode_settings.total_urls){new_url_index=last_url_index+1}url=what_urls[new_url_index]}else if(Drupal.settings.splashify.js_mode_settings.mode=='random'){var new_url_index=Math.floor(Math.random()*Drupal.settings.splashify.js_mode_settings.total_urls);url=what_urls[new_url_index]}$.jStorage.set('splashlasturl',url);if(jsmode=='redirect'){window.location.replace(url)}else if(jsmode=='colorbox'){$.colorbox({transition:'elastic',iframe:true,href:url,width:Drupal.settings.splashify.js_mode_settings.size_width,height:Drupal.settings.splashify.js_mode_settings.size_height})}else if(jsmode=='window'){window.open(url,'splash',Drupal.settings.splashify.js_mode_settings.size)}}});function showpage(){jQuery('html').show()}function hidepage(){jQuery('html').hide()}
\ No newline at end of file
diff --git a/js/splashify_lightbox.js b/js/splashify_lightbox.js
new file mode 100644
index 0000000..cd3c0a2
--- /dev/null
+++ b/js/splashify_lightbox.js
@@ -0,0 +1,15 @@
+(function ($) {
+  Drupal.behaviors.splashifyBehavior.lightbox =
+    function (context, settings) {
+      var url = settings.splashify.url;
+
+      $.colorbox({
+        transition: 'elastic',
+        iframe: true,
+        href: url,
+        width: settings.splashify.width,
+        height: settings.splashify.height
+      });
+    }
+
+})(jQuery);
diff --git a/js/splashify_redirect.js b/js/splashify_redirect.js
new file mode 100644
index 0000000..de974bd
--- /dev/null
+++ b/js/splashify_redirect.js
@@ -0,0 +1,9 @@
+(function ($) {
+  Drupal.behaviors.splashifyBehavior.redirect =
+    function (context, settings) {
+      var url = settings.splashify.url;
+
+      window.location.replace(url);
+    }
+
+})(jQuery);
diff --git a/js/splashify_window.js b/js/splashify_window.js
new file mode 100644
index 0000000..1c97502
--- /dev/null
+++ b/js/splashify_window.js
@@ -0,0 +1,9 @@
+(function ($) {
+  Drupal.behaviors.splashifyBehavior.window =
+    function (context, settings) {
+      var url = settings.splashify.url;
+
+      window.open(url, 'splash', settings.splashify.size);
+    }
+
+})(jQuery);
diff --git a/splashify.display.inc b/splashify.display.inc
deleted file mode 100644
index 1e3473c..0000000
--- a/splashify.display.inc
+++ /dev/null
@@ -1,427 +0,0 @@
-<?php
-
-/**
- * @file
- * Handles displaying the splash page.
- *
- * Either creates the JS for handling the splash page (redirect, lightbox or
- * popup) or displays the What: Content full screen or in the site design.
- */
-
-/**
- * Implements hook_page_build().
- *
- * Generates the JS for the redirect, lightbox or popup window.
- */
-function splashify_page_build() {
-  global $user;
-  global $base_url;
-
-  // Add the JSON file before jstorage. This is for IE7.
-  drupal_add_js(drupal_get_path('module', 'splashify') . '/js/jquery.json-2.3.min.js', array(
-    'group' => JS_LIBRARY,
-    'cache' => TRUE,
-  ));
-
-  // Load the jStorage library.
-  $library = libraries_load('jstorage');
-  //echo '<pre>'; print_r($library); echo '</pre>'; exit;
-
-  // If this is the cron script or drush, do not run the splashify code.
-  $drush_check = (function_exists('drush_verify_cli') && call_user_func('drush_verify_cli')) ? TRUE : FALSE;
-  $cron_check = (strpos($_SERVER['PHP_SELF'], 'cron.php') !== FALSE) ? TRUE : FALSE;
-  if ($drush_check || $cron_check) {
-    return;
-  }
-
-  /*
-   * Step #1: Retrieve the admin settings.
-   */
-
-  $config = _splashify_get_config();
-
-  $only_anonymous = $config['only_anonymous'];
-  $when_frequency = $config['when_frequency'];
-  $where_page = $config['where_page'];
-  $where_listpages = $config['where_listpages'];
-  $where_opposite = $config['where_opposite'];
-  $what_mode = $config['what_mode'];
-  $what_content_value = $config['what_content_value'];
-  $how_mode = $config['how_mode'];
-  $how_size = $config['how_size'];
-
-  /*
-   * Step #2: Should we display the splash page?
-   */
-  if ($only_anonymous && $user->uid > 0) {
-    return;
-  }
-
-  if ($when_frequency == 'never') {
-    return;
-  }
-
-  // Default to not showing the splash page.
-  $splash_display = FALSE;
-
-  if (!isset($_GET['splash'])) {
-    $_GET['splash'] = '';
-  }
-
-  $splash_correct_page = FALSE;
-  switch ($where_page) {
-    case 'all':
-      // Display on all pages.
-      $splash_correct_page = TRUE;
-      break;
-
-    case 'home':
-      $is_home_page = drupal_is_front_page();
-      if ($where_opposite) {
-        if (!$is_home_page) {
-          // Display on every page except the home page.
-          $splash_correct_page = TRUE;
-        }
-      }
-      else {
-        if ($is_home_page) {
-          // Display on the home page.
-          $splash_correct_page = TRUE;
-        }
-      }
-      break;
-
-    case 'list':
-      $list_paths = preg_split('/[\n\r]+/', $where_listpages);
-      if ($where_opposite) {
-
-        // Display the splash on every page except the following pages.
-        $splash_correct_page = TRUE;
-        foreach ($list_paths as $list_path) {
-          $list_path = trim($list_path);
-          if ($list_path == $_GET['q']) {
-            $splash_correct_page = FALSE;
-            break;
-          }
-        }
-
-      }
-      else {
-
-        // Display the splash on the provided list of pages. Loop through the
-        // paths.
-        foreach ($list_paths as $list_path) {
-          $list_path = trim($list_path);
-          if ($list_path != $_GET['q'] && $where_opposite) {
-          }
-          else if ($list_path == $_GET['q']) {
-            $splash_correct_page = TRUE;
-            break;
-          }
-        }
-
-      }
-      break;
-  }
-
-  /*
-   * Goes through the main server side checks to see if we should show the
-   * splash page.
-   */
-
-  if (empty($what_content_value)) {
-    // The What: Content field is not specified.
-    $splash_display = FALSE;
-  }
-  elseif ($_GET['splash'] == 'off') {
-    // Special case for preventing the splash page from showing up.
-    $splash_display = FALSE;
-  }
-  elseif ($_GET['splash'] == 'on') {
-    // Special case for forcing the splash page to show up.
-    $splash_display = TRUE;
-
-    // Modify this value to force the splash to show up in this case.
-    $when_frequency = 'always';
-  }
-  elseif ($splash_correct_page) {
-    // We need to show the splash page on this page. Do one last check.
-    $parsed_url = parse_url($base_url);
-    // We passed all of the tests...display the splash page!
-    $splash_display = TRUE;
-  }
-
-  // If we shouldn't display the splash, end the code here.
-  if (!$splash_display) {
-    return;
-  }
-
-  /*
-   * Step #3: Display the Splash Page
-   *
-   * At this point, we know that we should display the splash page.
-   */
-
-  // Controls when the jStorage variable should expire next. In other words,
-  // when should the splash page show up again?
-  $js_expiretime = '';
-
-  // Since the time is based on server time, we need to pass this value to
-  // the JS.
-  $js_nowtime = time();
-
-  // This variable is a way to always show the splash in the JS.
-  $js_splash_always = FALSE;
-
-  switch ($when_frequency) {
-    case 'once':
-      // Set to expire in one year.
-      $js_expiretime = time() + (365 * 24 * 60 * 60);
-      break;
-
-    case 'daily':
-      // Set to expire in 24 hours.
-      $js_expiretime = time() + (24 * 60 * 60);
-      break;
-
-    case 'weekly':
-      // Set to expire in 7 days.
-      $js_expiretime = time() + (7 * 24 * 60 * 60);
-      break;
-
-    case 'always':
-      // This should make the splash always show up on the next page load.
-      $js_expiretime = time();
-      $js_splash_always = TRUE;
-      break;
-  }
-
-  // Deal with the mode settings.
-  $js_mode_settings = array();
-  $js_mode_settings['mode'] = $what_mode;
-  $js_mode_settings['system_splash'] = '';
-  $js_mode_settings['urls'] = '';
-
-  if ($what_mode == 'template' || $what_mode == 'fullscreen') {
-    // We need to redirect to the System generated splash page. Define the
-    // action url. This variable tells the JS that we only are dealing with one
-    // url.
-    $js_mode_settings['system_splash'] = url('splashify-splash');
-  }
-  elseif ($what_mode == 'sequence' || $what_mode == 'random') {
-    // Split up the textarea field by lines.
-    $what_paths = preg_split('/[\n\r]+/', $what_content_value);
-
-    // This holds all of the url values in the entered order.
-    $js_mode_settings['urls'] = array();
-    $js_mode_settings['total_urls'] = count($what_paths);
-    foreach ($what_paths as $path) {
-      $js_mode_settings['urls'][] = url(trim($path));
-    }
-  }
-
-  // Define the last remaining JS variables we need to send.
-  $size_action = $how_size ? explode('x', $how_size) : FALSE;
-  $js_mode = '';
-  switch ($how_mode) {
-    case 'redirect':
-      // Redirect to a different url.
-      $js_mode = 'redirect';
-      break;
-
-    case 'window':
-      // Open up a popup window.
-      $js_mode = 'window';
-      $js_mode_settings['size'] = $size_action ? 'width=' . $size_action[0] . ',height=' . $size_action[1] : '';
-      break;
-
-    case 'lightbox':
-      if (module_exists('colorbox')) {
-        // Display a ColorBox.
-        $js_mode = 'colorbox';
-
-        // Get the size of the lightbox.
-        if (count($size_action) > 1) {
-          $colorbox_width = $size_action[0];
-          $colorbox_height = $size_action[1];
-        }
-        else {
-          // Default size settings for the colorbox.
-          $colorbox_width = 800;
-          $colorbox_height = 600;
-        }
-
-        $js_mode_settings['size_width'] = $colorbox_width;
-        $js_mode_settings['size_height'] = $colorbox_height;
-      }
-      else {
-        return;
-      }
-
-      break;
-
-    default:
-      // Do nothing! This is a fail safe.
-      return;
-  }
-
-
-  /*
-   * Finally: Include the JS that puts it all together!
-   *
-   * At this point the page passed all of the server side checks. We now
-   * implement JS code that checks if the splash page should show up, based
-   * on when it last showed up. It then executes the JS action code, based
-   * on the specified settings.
-   */
-
-  // Make our splash settings variables available to our JavaScript.
-  $js_settings = array(
-    'js_splash_always' => $js_splash_always ? '1' : '0',
-    'js_expire_after' => $js_expiretime - $js_nowtime,
-    'js_mode' => $js_mode,
-    'js_mode_settings' => $js_mode_settings,
-    'js_disable_referrer_check' => variable_get('disable_referrer_check', 0),
-  );
-
-  drupal_add_js(array('splashify' => $js_settings), array(
-    'type' => 'setting',
-    'cache' => TRUE,
-    'weight' => -100,
-    'every_page' => TRUE,
-  ));
-
-  // Include the main JS file that does the heavy lifting.
-  $js_splashify_int = drupal_get_path('module', 'splashify') . '/js/splashify_init.js';
-  drupal_add_js($js_splashify_int, array(
-    'type' => 'file',
-    'scope' => 'header',
-    'group' => JS_THEME,
-    'cache' => TRUE,
-    'weight' => -99,
-    'every_page' => TRUE,
-  ));
-}
-
-/**
- * Display the What: Content either in the site template or full screen.
- *
- * @return string
- *   If the $what_mode equals 'template', returns the string entered into
- *   $what_content_value. If $what_mode equals 'fullscreen', it displays
- *   the text right there and exits the request.
- */
-function splashify_display_splashtext() {
-  $config = _splashify_get_config();
-
-  $what_mode = $config['what_mode'];
-  $what_content_value = $config['what_content_value'];
-  $what_content_title = $config['what_content_title'];
-
-  if ($what_mode == 'template') {
-    // Display what they entered in the field in the site template.
-    if (!empty($what_content_title)) {
-      drupal_set_title($what_content_title);
-    }
-
-    return $what_content_value;
-  }
-  elseif ($what_mode == 'fullscreen') {
-    // Display what they entered in the field as a full page.
-    echo $what_content_value;
-    drupal_exit();
-  }
-}
-
-/**
- * Retrieves the admin settings.
- *
- * Will either retrieve the desktop or mobile settings, depending whether this
- * is a mobile request or not.
- *
- * @return array
- *   Returns an associate array with the following keys: when_frequency,
- *   when_mobile_test, where_page, where_listpages, what_mode, what_content,
- *   what_content_value, how_mode, and how_size.
- */
-function _splashify_get_config() {
-  // This controls whether mobile is enabled or not.
-  $is_mobile_enabled = variable_get('splashify_when_mobile', 0);
-
-  // This controls whether or not we should use the mobile settings for this
-  // request.
-  $do_mobile = FALSE;
-
-  // If this admin setting is true, force the system to use the mobile
-  // settings.
-  $force_mobile = variable_get('splashify_when_mobile_test', FALSE);
-
-  if (!empty($is_mobile_enabled)) {
-
-    // Is this a mobile request?
-    require_once 'mobile_detect/Mobile_Detect.php';
-    $detect = new Mobile_Detect();
-    if ($detect->isMobile() || $force_mobile) {
-      // This is a mobile request!
-      $do_mobile = TRUE;
-
-      // Get the mobile admin settings.
-      $when_frequency = variable_get('splashify_when_mobile_frequency', 'never');
-      $where_page = variable_get('splashify_where_mobile_page', 'home');
-      $where_listpages = variable_get('splashify_where_mobile_listpages', '');
-      $where_opposite = variable_get('splashify_where_mobile_opposite', FALSE);
-      $what_mode = variable_get('splashify_what_mobile_mode', 'random');
-      $what_content = variable_get('splashify_what_mobile_content', '');
-      $what_content_title = variable_get('splashify_what_mobile_pagetitle', '');
-      $how_mode = variable_get('splashify_how_mobile_mode', 'redirect');
-
-      // This is no longer an option for the mobile settings.
-      $how_size = '';
-    }
-  }
-
-  if (!$do_mobile) {
-    // Get the desktop admin settings.
-    $when_frequency = variable_get('splashify_when_desktop_frequency', 'never');
-    $where_page = variable_get('splashify_where_desktop_page', 'home');
-    $where_listpages = variable_get('splashify_where_desktop_listpages', '');
-    $where_opposite = variable_get('splashify_where_desktop_opposite', FALSE);
-    $what_mode = variable_get('splashify_what_desktop_mode', 'random');
-    $what_content = variable_get('splashify_what_desktop_content', '');
-    $what_content_title = variable_get('splashify_what_desktop_pagetitle', '');
-    $how_mode = variable_get('splashify_how_desktop_mode', 'redirect');
-    $how_size = variable_get('splashify_how_desktop_size', '');
-  }
-
-  $only_anonymous = variable_get('splashify_when_anonymous', FALSE);
-
-  // This is a textarea field, so make sure this value is safe.
-  $where_listpages = check_plain($where_listpages);
-
-  if (is_array($what_content)) {
-    // We are dealing with a text_format field.
-    $what_content_value = check_markup($what_content['value'], $what_content['format']);
-  }
-  elseif (isset($what_content)) {
-    // We are dealing with a textarea field.
-    $what_content_value = check_plain($what_content);
-  }
-  else {
-    $what_content_value = '';
-  }
-
-  return array(
-    'only_anonymous' => $only_anonymous,
-    'when_frequency' => $when_frequency,
-    'when_mobile_test' => $force_mobile,
-    'where_page' => $where_page,
-    'where_listpages' => $where_listpages,
-    'where_opposite' => $where_opposite,
-    'what_mode' => $what_mode,
-    'what_content' => $what_content,
-    'what_content_value' => $what_content_value,
-    'what_content_title' => $what_content_title,
-    'how_mode' => $how_mode,
-    'how_size' => $how_size,
-  );
-}
diff --git a/splashify.info b/splashify.info
deleted file mode 100644
index 444c4c9..0000000
--- a/splashify.info
+++ /dev/null
@@ -1,6 +0,0 @@
-name = Splashify
-description = Display a splash page anywhere on the site.
-core = 8.x
-configure = admin/config/system/splashify
-
-dependencies[] = libraries
diff --git a/splashify.info.yml b/splashify.info.yml
new file mode 100644
index 0000000..5959b44
--- /dev/null
+++ b/splashify.info.yml
@@ -0,0 +1,11 @@
+name: 'Splashify'
+type: module
+description: 'Display a splash page anywhere on the site.'
+
+version: '8.x-1.0'
+core: '8.x'
+
+dependencies:
+  - libraries
+  - colorbox
+  - field_group
diff --git a/splashify.install b/splashify.install
deleted file mode 100644
index 1ecdaa1..0000000
--- a/splashify.install
+++ /dev/null
@@ -1,80 +0,0 @@
-<?php
-
-/**
- * @file
- * Handles installing, uninstalling and the requirements for Splashify.
- */
-
-/**
- * Implements hook_requirements().
- *
- * Make sure the jStorage library is installed on the site.
- */
-function splashify_requirements($phase) {
-  $requirements = array();
-  $t = get_t();
-
-  // Make sure we we can access the jStorage library.
-  if ($phase == 'runtime') {
-    $library = libraries_detect('jstorage');
-    $installed = ($library && !empty($library['installed']));
-
-    if ($installed) {
-      // Check the integrity of the library folder
-      $path = DRUPAL_ROOT . '/' . $library['library path'] . '/';
-
-      $file_integrity = file_exists($path . 'jstorage.min.js');
-
-      if (!$file_integrity) {
-        $requirements['splashify_jstorage_integrity'] = array(
-          'title' => $t('Splashify library file integrity'),
-          'description' => $t('Cannot find the file "jstorage.min.js".'),
-          'value' => '',
-          'severity' => REQUIREMENT_ERROR,
-        );
-      }
-    }
-    else {
-      $requirements['splashify_jstorage'] = array(
-        'title' => $t('Splashify'),
-        'description' => $t('The jStorage library could not be found. See the README.txt file for more information.'),
-        'value' => '',
-        'severity' => REQUIREMENT_ERROR,
-      );
-    }
-  }
-
-  return $requirements;
-}
-
-/**
- * Implements hook_uninstall().
- *
- * Deletes all of the variables this module creates via variable_set().
- */
-function splashify_uninstall() {
-  variable_del('splashify_when_anonymous');
-
-  // Desktop variables.
-  variable_del('splashify_when_desktop_frequency');
-  variable_del('splashify_where_desktop_page');
-  variable_del('splashify_where_desktop_listpages');
-  variable_del('splashify_where_desktop_opposite');
-  variable_del('splashify_what_desktop_mode');
-  variable_del('splashify_what_desktop_content');
-  variable_del('splashify_what_desktop_pagetitle');
-  variable_del('splashify_how_desktop_mode');
-  variable_del('splashify_how_desktop_size');
-
-  // Mobile variables.
-  variable_del('splashify_when_mobile');;
-  variable_del('splashify_when_mobile_test');
-  variable_del('splashify_when_mobile_frequency');
-  variable_del('splashify_where_mobile_page');
-  variable_del('splashify_where_mobile_listpages');
-  variable_del('splashify_where_mobile_opposite');
-  variable_del('splashify_what_mobile_mode');
-  variable_del('splashify_what_mobile_content');
-  variable_del('splashify_what_mobile_pagetitle');
-  variable_del('splashify_how_mobile_mode');
-}
diff --git a/splashify.libraries.yml b/splashify.libraries.yml
new file mode 100644
index 0000000..fb75da4
--- /dev/null
+++ b/splashify.libraries.yml
@@ -0,0 +1,43 @@
+splash_init:
+  header: true
+  js:
+    js/splashify_init.js: {}
+  dependencies:
+    - core/jquery
+    - core/jquery.once
+    - core/drupal
+    - core/drupalSettings
+
+full_screen:
+  header: true
+  css:
+    theme:
+      css/splashify.css: {}
+  js:
+    js/splashify_full_screen.js: {}
+  dependencies:
+    - splashify/splash_init
+
+redirect:
+  header: true
+  js:
+    js/splashify_redirect.js: {}
+  dependencies:
+    - splashify/splash_init
+
+window:
+  header: true
+  js:
+    js/splashify_window.js: {}
+  dependencies:
+    - splashify/splash_init
+
+lightbox:
+  header: true
+  js:
+    js/splashify_lightbox.js: {}
+  dependencies:
+    - splashify/splash_init
+    - colorbox/colorbox
+    - colorbox/init
+    - colorbox/default
diff --git a/splashify.links.action.yml b/splashify.links.action.yml
new file mode 100644
index 0000000..5bff70a
--- /dev/null
+++ b/splashify.links.action.yml
@@ -0,0 +1,10 @@
+entity.splashify_entity.add_form:
+  route_name: entity.splashify_entity.add_form
+  title: 'Add Splashify entity'
+  appears_on:
+    - entity.splashify_entity.collection
+entity.splashify_group_entity.add_form:
+  route_name: entity.splashify_group_entity.add_form
+  title: 'Add Splashify group entity'
+  appears_on:
+    - entity.splashify_group_entity.collection
diff --git a/splashify.links.menu.yml b/splashify.links.menu.yml
new file mode 100644
index 0000000..1667668
--- /dev/null
+++ b/splashify.links.menu.yml
@@ -0,0 +1,15 @@
+# Splashify entity menu items definition
+entity.splashify_entity.collection:
+  title: 'Splashify entity list'
+  route_name: entity.splashify_entity.collection
+  description: 'List Splashify entity entities'
+  parent: system.admin_structure
+  weight: 100
+
+# Splashify group entity menu items definition
+entity.splashify_group_entity.collection:
+  title: 'Splashify group entity list'
+  route_name: entity.splashify_group_entity.collection
+  description: 'List Splashify group entity entities'
+  parent: system.admin_structure
+  weight: 100
diff --git a/splashify.links.task.yml b/splashify.links.task.yml
new file mode 100644
index 0000000..976b066
--- /dev/null
+++ b/splashify.links.task.yml
@@ -0,0 +1,34 @@
+# Splashify entity routing definition
+entity.splashify_entity.canonical:
+  route_name: entity.splashify_entity.canonical
+  base_route: entity.splashify_entity.canonical
+  title: 'View'
+
+entity.splashify_entity.edit_form:
+  route_name: entity.splashify_entity.edit_form
+  base_route: entity.splashify_entity.canonical
+  title: Edit
+
+entity.splashify_entity.delete_form:
+  route_name:  entity.splashify_entity.delete_form
+  base_route:  entity.splashify_entity.canonical
+  title: Delete
+  weight: 10
+
+# Splashify group entity routing definition
+entity.splashify_group_entity.canonical:
+  route_name: entity.splashify_group_entity.canonical
+  base_route: entity.splashify_group_entity.canonical
+  title: 'View'
+
+entity.splashify_group_entity.edit_form:
+  route_name: entity.splashify_group_entity.edit_form
+  base_route: entity.splashify_group_entity.canonical
+  title: Edit
+
+entity.splashify_group_entity.delete_form:
+  route_name:  entity.splashify_group_entity.delete_form
+  base_route:  entity.splashify_group_entity.canonical
+  title: Delete
+  weight: 10
+
diff --git a/splashify.module b/splashify.module
index 6dd0bae..ee8ce4b 100644
--- a/splashify.module
+++ b/splashify.module
@@ -1,126 +1,29 @@
 <?php
 
 /**
- * @file
- * The main file for the module.
+ * Implements hook_preprocess_HOOK().
  */
+function splashify_preprocess_html(&$variables) {
+  $route = \Drupal::routeMatch()->getRouteObject();
+  $is_admin = \Drupal::service('router.admin_context')->isAdminRoute($route);
 
-require_once 'splashify.display.inc';
-
-/**
- * Implements hook_menu().
- */
-function splashify_menu() {
-  $items = array();
-
-  // If they specify What: Enter Text or What: Text Full Screen, this is the
-  // page that will come up.
-  $items['splashify-splash'] = array(
-    'title' => 'Splash',
-    'page callback' => 'splashify_display_splashtext',
-    'access arguments' => array('access content'),
-    'type' => MENU_CALLBACK,
-  );
-
-  // Define the admin area.
-  $items['admin/config/system/splashify'] = array(
-    'page callback' => 'drupal_get_form',
-    'page arguments' => array('splashify_admin_when_form'),
-    'title' => 'Splashify',
-    'description' => t('Configuration area for the Splashify system.'),
-    'file' => 'admin/splashify.admin.when.inc',
-    'type' => MENU_NORMAL_ITEM,
-    'access arguments' => array('access splashify admin'),
-    'weight' => 6,
-  );
-
-  $items['admin/config/system/splashify/when'] = array(
-    'page callback' => 'drupal_get_form',
-    'page arguments' => array('splashify_admin_when_form'),
-    'title' => 'When',
-    'file' => 'admin/splashify.admin.when.inc',
-    'type' => MENU_DEFAULT_LOCAL_TASK,
-    'access arguments' => array('access splashify admin'),
-    'weight' => 6,
-  );
-
-  $items['admin/config/system/splashify/where'] = array(
-    'page callback' => 'drupal_get_form',
-    'page arguments' => array('splashify_admin_where_form'),
-    'title' => 'Where',
-    'file' => 'admin/splashify.admin.where.inc',
-    'type' => MENU_LOCAL_TASK,
-    'access arguments' => array('access splashify admin'),
-    'weight' => 8,
-  );
-
-  $items['admin/config/system/splashify/what'] = array(
-    'page callback' => 'drupal_get_form',
-    'page arguments' => array('splashify_admin_what_form'),
-    'title' => 'What',
-    'file' => 'admin/splashify.admin.what.inc',
-    'type' => MENU_LOCAL_TASK,
-    'access arguments' => array('access splashify admin'),
-    'weight' => 10,
-  );
-
-  $items['admin/config/system/splashify/how'] = array(
-    'page callback' => 'drupal_get_form',
-    'page arguments' => array('splashify_admin_how_form'),
-    'title' => 'How',
-    'file' => 'admin/splashify.admin.how.inc',
-    'type' => MENU_LOCAL_TASK,
-    'access arguments' => array('access splashify admin'),
-    'weight' => 12,
-  );
-
-  return $items;
-}
-
-/**
- * Implements hook_permission().
- */
-function splashify_permission() {
-  return array(
-    'access splashify admin' => array(
-      'title' => t('Administer Splashify'),
-      'description' => t('Access the admin area for the splashify module.'),
-    ),
-  );
-}
-
-/**
- * Implements hook_libraries_info().
- */
-function splashify_libraries_info() {
-  $libraries = array();
-  $libraries['jstorage'] = array(
-    'name' => 'jStorage library',
-    'vendor url' => 'http://www.jstorage.info/',
-    'download url' => 'https://github.com/andris9/jStorage/zipball/master',
-    'version' => '0.3.2',
-    'files' => array(
-      'js' => array(
-        'jstorage.min.js',
-      ),
-    ),
-  );
+  if ($is_admin) {
+    return;
+  }
 
-  return $libraries;
+  $splash = \Drupal::service('splashify.injection')->getAttach();
+  if (!empty($splash)) {
+    array_unshift($variables['page_top'], $splash);
+  }
 }
 
 /**
- * Implements hook_help().
+ * Implements hook_theme().
  */
-function splashify_help($path, $arg) {
-  switch ($path) {
-    case 'admin/help#splashify':
-      $output = '';
-      $output .= '<h3>' . t('Splashify Help') . '</h3>';
-      $output .= '<h4>' . t('What do we consider a splash page?') . '</h4>';
-      $output .= '<p>' . t("We define a splash page as being content that shows up at a specified interval, at a specified location, one time. If someone goes to a certain page for the first time, we want to make sure the splash content shows up. But if the person is coming from an internal link on the site, we don't want the splash content to show up over and over again (otherwise, the splash page would become a nuisance).") . '</p>';
-      $output .= '<p>' . t('We determine how often the splash page should show up by what is defined under the "When" tab.') . '</p>';
-      return $output;
-  }
+function splashify_theme($existing, $type, $theme, $path) {
+  return [
+    'splashify' => [
+      'variables' => ['splashify_content' => NULL],
+    ],
+  ];
 }
-
diff --git a/splashify.permissions.yml b/splashify.permissions.yml
new file mode 100644
index 0000000..688453d
--- /dev/null
+++ b/splashify.permissions.yml
@@ -0,0 +1,38 @@
+add Splashify entity entities:
+  title: 'Create new Splashify entity entities'
+
+administer Splashify entity entities:
+  title: 'Administer Splashify entity entities'
+  description: 'Allow to access the administration form to configure Splashify entity entities.'
+  restrict access: true
+
+delete Splashify entity entities:
+  title: 'Delete Splashify entity entities'
+
+edit Splashify entity entities:
+  title: 'Edit Splashify entity entities'
+
+view published Splashify entity entities:
+  title: 'View published Splashify entity entities'
+
+view unpublished Splashify entity entities:
+  title: 'View unpublished Splashify entity entities'
+add Splashify group entity entities:
+  title: 'Create new Splashify group entity entities'
+
+administer Splashify group entity entities:
+  title: 'Administer Splashify group entity entities'
+  description: 'Allow to access the administration form to configure Splashify group entity entities.'
+  restrict access: true
+
+delete Splashify group entity entities:
+  title: 'Delete Splashify group entity entities'
+
+edit Splashify group entity entities:
+  title: 'Edit Splashify group entity entities'
+
+view published Splashify group entity entities:
+  title: 'View published Splashify group entity entities'
+
+view unpublished Splashify group entity entities:
+  title: 'View unpublished Splashify group entity entities'
diff --git a/splashify.routing.yml b/splashify.routing.yml
new file mode 100644
index 0000000..fbcc432
--- /dev/null
+++ b/splashify.routing.yml
@@ -0,0 +1,6 @@
+splashify.splashify:
+  path: '/splashify/{id}'
+  defaults:
+    _controller: '\Drupal\splashify\Controller\SplashifyController::content'
+  requirements:
+    _permission: 'access content'
diff --git a/splashify.services.yml b/splashify.services.yml
new file mode 100644
index 0000000..be73f09
--- /dev/null
+++ b/splashify.services.yml
@@ -0,0 +1,9 @@
+services:
+  splashify.page_cache_request_policy.splashify_path:
+    class: Drupal\splashify\PageCache\SplashifyPath
+    tags:
+      - { name: page_cache_request_policy }
+
+  splashify.injection:
+    class: Drupal\splashify\Service\SplashifyInjection
+
diff --git a/splashify_entity.page.inc b/splashify_entity.page.inc
new file mode 100644
index 0000000..814351d
--- /dev/null
+++ b/splashify_entity.page.inc
@@ -0,0 +1,32 @@
+<?php
+
+/**
+ * @file
+ * Contains splashify_entity.page.inc.
+ *
+ * Page callback for Splashify entity entities.
+ */
+
+use Drupal\Core\Render\Element;
+use Drupal\Core\Link;
+use Drupal\Core\Url;
+
+/**
+ * Prepares variables for Splashify entity templates.
+ *
+ * Default template: splashify_entity.html.twig.
+ *
+ * @param array $variables
+ *   An associative array containing:
+ *   - elements: An associative array containing the user information and any
+ *   - attributes: HTML attributes for the containing element.
+ */
+function template_preprocess_splashify_entity(array &$variables) {
+  // Fetch SplashifyEntity Entity Object.
+  $splashify_entity = $variables['elements']['#splashify_entity'];
+
+  // Helpful $content variable for templates.
+  foreach (Element::children($variables['elements']) as $key) {
+    $variables['content'][$key] = $variables['elements'][$key];
+  }
+}
diff --git a/splashify_group_entity.page.inc b/splashify_group_entity.page.inc
new file mode 100644
index 0000000..45a0931
--- /dev/null
+++ b/splashify_group_entity.page.inc
@@ -0,0 +1,32 @@
+<?php
+
+/**
+ * @file
+ * Contains splashify_group_entity.page.inc.
+ *
+ * Page callback for Splashify group entity entities.
+ */
+
+use Drupal\Core\Render\Element;
+use Drupal\Core\Link;
+use Drupal\Core\Url;
+
+/**
+ * Prepares variables for Splashify group entity templates.
+ *
+ * Default template: splashify_group_entity.html.twig.
+ *
+ * @param array $variables
+ *   An associative array containing:
+ *   - elements: An associative array containing the user information and any
+ *   - attributes: HTML attributes for the containing element.
+ */
+function template_preprocess_splashify_group_entity(array &$variables) {
+  // Fetch SplashifyGroupEntity Entity Object.
+  $splashify_group_entity = $variables['elements']['#splashify_group_entity'];
+
+  // Helpful $content variable for templates.
+  foreach (Element::children($variables['elements']) as $key) {
+    $variables['content'][$key] = $variables['elements'][$key];
+  }
+}
diff --git a/src/Controller/SplashifyController.php b/src/Controller/SplashifyController.php
new file mode 100644
index 0000000..0f9e982
--- /dev/null
+++ b/src/Controller/SplashifyController.php
@@ -0,0 +1,48 @@
+<?php
+namespace Drupal\splashify\Controller;
+
+use Drupal\Core\Controller\ControllerBase;
+use Drupal\splashify\Entity\SplashifyEntity;
+use Drupal\splashify\Entity\SplashifyGroupEntity;
+use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
+
+/**
+ * A splashify controller. Used in redirect-mode.
+ */
+class SplashifyController extends ControllerBase {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function content($id) {
+    $entity = SplashifyEntity::load($id);
+
+    if (empty($entity)) {
+      throw new NotFoundHttpException();
+    }
+
+    $content = $entity->getContent();
+    $group_id = $entity->getGroupId();
+    $group = SplashifyGroupEntity::load($group_id);
+
+    $splash_mode = $group->getSplashMode();
+
+    // Render plain html or via site template.
+    switch ($splash_mode) {
+      case 'template':
+        return [
+          '#type' => 'markup',
+          '#markup' => $content,
+        ];
+
+      case 'plain_text':
+        echo $content;
+        exit();
+
+      default:
+        throw new NotFoundHttpException();
+
+    }
+  }
+
+}
diff --git a/src/Entity/SplashifyEntity.php b/src/Entity/SplashifyEntity.php
new file mode 100644
index 0000000..1cf9640
--- /dev/null
+++ b/src/Entity/SplashifyEntity.php
@@ -0,0 +1,288 @@
+<?php
+
+namespace Drupal\splashify\Entity;
+
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Field\BaseFieldDefinition;
+use Drupal\Core\Entity\ContentEntityBase;
+use Drupal\Core\Entity\EntityChangedTrait;
+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\user\UserInterface;
+
+/**
+ * Defines the Splashify entity entity.
+ *
+ * @ingroup splashify
+ *
+ * @ContentEntityType(
+ *   id = "splashify_entity",
+ *   label = @Translation("Splashify entity"),
+ *   handlers = {
+ *     "view_builder" = "Drupal\Core\Entity\EntityViewBuilder",
+ *     "list_builder" = "Drupal\splashify\SplashifyEntityListBuilder",
+ *     "views_data" = "Drupal\splashify\Entity\SplashifyEntityViewsData",
+ *
+ *     "form" = {
+ *       "default" = "Drupal\splashify\Form\SplashifyEntityForm",
+ *       "add" = "Drupal\splashify\Form\SplashifyEntityForm",
+ *       "edit" = "Drupal\splashify\Form\SplashifyEntityForm",
+ *       "delete" = "Drupal\splashify\Form\SplashifyEntityDeleteForm",
+ *     },
+ *     "access" = "Drupal\splashify\SplashifyEntityAccessControlHandler",
+ *     "route_provider" = {
+ *       "html" = "Drupal\splashify\SplashifyEntityHtmlRouteProvider",
+ *     },
+ *   },
+ *   base_table = "splashify_entity",
+ *   admin_permission = "administer Splashify entity entities",
+ *   entity_keys = {
+ *     "id" = "id",
+ *     "label" = "name",
+ *     "uuid" = "uuid",
+ *     "uid" = "user_id",
+ *     "langcode" = "langcode",
+ *     "status" = "status",
+ *   },
+ *   links = {
+ *     "canonical" = "/admin/structure/splashify_entity/{splashify_entity}",
+ *     "add-form" = "/admin/structure/splashify_entity/add",
+ *     "edit-form" = "/admin/structure/splashify_entity/{splashify_entity}/edit",
+ *     "delete-form" = "/admin/structure/splashify_entity/{splashify_entity}/delete",
+ *     "collection" = "/admin/structure/splashify_entity",
+ *   },
+ * )
+ */
+class SplashifyEntity extends ContentEntityBase implements SplashifyEntityInterface {
+
+  use EntityChangedTrait;
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function preCreate(EntityStorageInterface $storage_controller, array &$values) {
+    parent::preCreate($storage_controller, $values);
+    $values += array(
+      'user_id' => \Drupal::currentUser()->id(),
+    );
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getName() {
+    return $this->get('name')->value;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function setName($name) {
+    $this->set('name', $name);
+    return $this;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getCreatedTime() {
+    return $this->get('created')->value;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function setCreatedTime($timestamp) {
+    $this->set('created', $timestamp);
+    return $this;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getOwner() {
+    return $this->get('user_id')->entity;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getOwnerId() {
+    return $this->get('user_id')->target_id;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function setOwnerId($uid) {
+    $this->set('user_id', $uid);
+    return $this;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function setOwner(UserInterface $account) {
+    $this->set('user_id', $account->id());
+    return $this;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function isPublished() {
+    return (bool) $this->getEntityKey('status');
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function setPublished($published) {
+    $this->set('status', $published ? NODE_PUBLISHED : NODE_NOT_PUBLISHED);
+    return $this;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getContent() {
+    return $this->get('field_content')->value;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getGroupId() {
+    return $this->get('field_group')->target_id;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getGroup() {
+    $group_id = $this->get('field_group')->target_id;
+    return SplashifyGroupEntity::load($group_id);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function baseFieldDefinitions(EntityTypeInterface $entity_type) {
+    $fields = parent::baseFieldDefinitions($entity_type);
+
+    $fields['user_id'] = BaseFieldDefinition::create('entity_reference')
+      ->setLabel(t('Authored by'))
+      ->setDescription(t('The user ID of author of the Splashify entity entity.'))
+      ->setRevisionable(TRUE)
+      ->setSetting('target_type', 'user')
+      ->setSetting('handler', 'default')
+      ->setDefaultValueCallback('Drupal\node\Entity\Node::getCurrentUserId')
+      ->setTranslatable(TRUE)
+      ->setDisplayOptions('view', array(
+        'label' => 'hidden',
+        'type' => 'author',
+        'weight' => -5,
+      ))
+      ->setDisplayConfigurable('form', FALSE)
+      ->setDisplayConfigurable('view', FALSE);
+
+    $fields['name'] = BaseFieldDefinition::create('string')
+      ->setLabel(t('Name'))
+      ->setDescription(t('The name of the Splashify entity entity.'))
+      ->setRequired(TRUE)
+      ->setSettings(array(
+        'max_length' => 50,
+        'text_processing' => 0,
+      ))
+      ->setDefaultValue('')
+      ->setDisplayOptions('view', array(
+        'label' => 'above',
+        'type' => 'string',
+        'weight' => -4,
+      ))
+      ->setDisplayOptions('form', array(
+        'type' => 'string_textfield',
+        'weight' => -4,
+      ))
+      ->setDisplayConfigurable('form', FALSE)
+      ->setDisplayConfigurable('view', FALSE);
+
+    $fields['status'] = BaseFieldDefinition::create('boolean')
+      ->setLabel(t('Publishing status'))
+      ->setDescription(t('A boolean indicating whether the Splashify entity is published.'))
+      ->setDefaultValue(TRUE);
+
+    $fields['created'] = BaseFieldDefinition::create('created')
+      ->setLabel(t('Created'))
+      ->setDescription(t('The time that the entity was created.'));
+
+    $fields['changed'] = BaseFieldDefinition::create('changed')
+      ->setLabel(t('Changed'))
+      ->setDescription(t('The time that the entity was last edited.'));
+
+    $fields['field_content'] = BaseFieldDefinition::create('text_long')
+      ->setLabel(t('Content'))
+      ->setRequired(TRUE)
+      ->setTranslatable(FALSE)
+      ->setDisplayOptions('view', array(
+        'type' => 'text_default',
+        'label' => 'hidden',
+        'weight' => -3,
+      ))
+      ->setDisplayOptions('form', array(
+        'type' => 'text_textarea',
+        'weight' => -3,
+        'settings' => array(
+          'rows' => 5,
+        ),
+      ))
+      ->setDisplayConfigurable('from', FALSE)
+      ->setDisplayConfigurable('view', FALSE);
+
+    $fields['field_group'] = BaseFieldDefinition::create('entity_reference')
+      ->setLabel(t('Group'))
+      ->setRequired(TRUE)
+      ->setTranslatable(FALSE)
+      ->setSetting('target_type', 'splashify_group_entity')
+      ->setSetting('handler', 'default')
+      ->setDisplayOptions('view', array(
+        'type' => 'entity_reference_label',
+        'label' => 'inline',
+        'weight' => -2,
+        'settings' => array(
+          'link' => TRUE,
+        ),
+      ))
+      ->setDisplayOptions('form', array(
+        'type' => 'entity_reference_autocomplete',
+        'weight' => -2,
+        'settings' => array(
+          'match_operator' => 'CONTAINS',
+          'size' => 60,
+        ),
+      ))
+      ->setDisplayConfigurable('from', FALSE)
+      ->setDisplayConfigurable('view', FALSE);
+
+    $fields['field_weight'] = BaseFieldDefinition::create('integer')
+      ->setLabel(t('Weight'))
+      ->setRequired(FALSE)
+      ->setTranslatable(FALSE)
+      ->setSetting('min', -20)
+      ->setSetting('max', 20)
+      ->setDefaultValue(0)
+      ->setDisplayOptions('view', array(
+        'type' => 'number_integer',
+        'label' => 'hidden',
+        'weight' => -1,
+      ))
+      ->setDisplayOptions('form', array(
+        'type' => 'number',
+        'weight' => -1,
+      ))
+      ->setDisplayConfigurable('from', FALSE)
+      ->setDisplayConfigurable('view', FALSE);
+
+    return $fields;
+  }
+
+}
diff --git a/src/Entity/SplashifyEntityInterface.php b/src/Entity/SplashifyEntityInterface.php
new file mode 100644
index 0000000..5e3dd3e
--- /dev/null
+++ b/src/Entity/SplashifyEntityInterface.php
@@ -0,0 +1,91 @@
+<?php
+
+namespace Drupal\splashify\Entity;
+
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\Core\Entity\EntityChangedInterface;
+use Drupal\user\EntityOwnerInterface;
+
+/**
+ * Provides an interface for defining Splashify entity entities.
+ *
+ * @ingroup splashify
+ */
+interface SplashifyEntityInterface extends ContentEntityInterface, EntityChangedInterface, EntityOwnerInterface {
+
+  // Add get/set methods for your configuration properties here.
+
+  /**
+   * Gets the Splashify entity name.
+   *
+   * @return string
+   *   Name of the Splashify entity.
+   */
+  public function getName();
+
+  /**
+   * Sets the Splashify entity name.
+   *
+   * @param string $name
+   *   The Splashify entity name.
+   *
+   * @return \Drupal\splashify\Entity\SplashifyEntityInterface
+   *   The called Splashify entity entity.
+   */
+  public function setName($name);
+
+  /**
+   * Gets the Splashify entity creation timestamp.
+   *
+   * @return int
+   *   Creation timestamp of the Splashify entity.
+   */
+  public function getCreatedTime();
+
+  /**
+   * Sets the Splashify entity creation timestamp.
+   *
+   * @param int $timestamp
+   *   The Splashify entity creation timestamp.
+   *
+   * @return \Drupal\splashify\Entity\SplashifyEntityInterface
+   *   The called Splashify entity entity.
+   */
+  public function setCreatedTime($timestamp);
+
+  /**
+   * Returns the Splashify entity published status indicator.
+   *
+   * Unpublished Splashify entity are only visible to restricted users.
+   *
+   * @return bool
+   *   TRUE if the Splashify entity is published.
+   */
+  public function isPublished();
+
+  /**
+   * Sets the published status of a Splashify entity.
+   *
+   * @param bool $published
+   *   TRUE to set this Splashify entity to published, FALSE to set it to unpublished.
+   *
+   * @return \Drupal\splashify\Entity\SplashifyEntityInterface
+   *   The called Splashify entity entity.
+   */
+  public function setPublished($published);
+
+  /**
+   * Gets the Splashify entity content.
+   *
+   * @return string
+   */
+  public function getContent();
+
+  /**
+   * Gets the Splashify entity group target_id.
+   *
+   * @return string
+   */
+  public function getGroupId();
+
+}
diff --git a/src/Entity/SplashifyEntityViewsData.php b/src/Entity/SplashifyEntityViewsData.php
new file mode 100644
index 0000000..aa81b86
--- /dev/null
+++ b/src/Entity/SplashifyEntityViewsData.php
@@ -0,0 +1,28 @@
+<?php
+
+namespace Drupal\splashify\Entity;
+
+use Drupal\views\EntityViewsData;
+use Drupal\views\EntityViewsDataInterface;
+
+/**
+ * Provides Views data for Splashify entity entities.
+ */
+class SplashifyEntityViewsData extends EntityViewsData implements EntityViewsDataInterface {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getViewsData() {
+    $data = parent::getViewsData();
+
+    $data['splashify_entity']['table']['base'] = array(
+      'field' => 'id',
+      'title' => $this->t('Splashify entity'),
+      'help' => $this->t('The Splashify entity ID.'),
+    );
+
+    return $data;
+  }
+
+}
diff --git a/src/Entity/SplashifyGroupEntity.php b/src/Entity/SplashifyGroupEntity.php
new file mode 100644
index 0000000..f6b1ab5
--- /dev/null
+++ b/src/Entity/SplashifyGroupEntity.php
@@ -0,0 +1,519 @@
+<?php
+
+namespace Drupal\splashify\Entity;
+
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Field\BaseFieldDefinition;
+use Drupal\Core\Entity\ContentEntityBase;
+use Drupal\Core\Entity\EntityChangedTrait;
+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\user\UserInterface;
+
+/**
+ * Defines the Splashify group entity entity.
+ *
+ * @ingroup splashify
+ *
+ * @ContentEntityType(
+ *   id = "splashify_group_entity",
+ *   label = @Translation("Splashify group entity"),
+ *   handlers = {
+ *     "view_builder" = "Drupal\Core\Entity\EntityViewBuilder",
+ *     "list_builder" = "Drupal\splashify\SplashifyGroupEntityListBuilder",
+ *     "views_data" = "Drupal\splashify\Entity\SplashifyGroupEntityViewsData",
+ *
+ *     "form" = {
+ *       "default" = "Drupal\splashify\Form\SplashifyGroupEntityForm",
+ *       "add" = "Drupal\splashify\Form\SplashifyGroupEntityForm",
+ *       "edit" = "Drupal\splashify\Form\SplashifyGroupEntityForm",
+ *       "delete" = "Drupal\splashify\Form\SplashifyGroupEntityDeleteForm",
+ *     },
+ *     "access" = "Drupal\splashify\SplashifyGroupEntityAccessControlHandler",
+ *     "route_provider" = {
+ *       "html" = "Drupal\splashify\SplashifyGroupEntityHtmlRouteProvider",
+ *     },
+ *   },
+ *   base_table = "splashify_group_entity",
+ *   admin_permission = "administer Splashify group entity entities",
+ *   entity_keys = {
+ *     "id" = "id",
+ *     "label" = "name",
+ *     "uuid" = "uuid",
+ *     "uid" = "user_id",
+ *     "langcode" = "langcode",
+ *     "status" = "status",
+ *   },
+ *   links = {
+ *     "canonical" = "/admin/structure/splashify_group_entity/{splashify_group_entity}",
+ *     "add-form" = "/admin/structure/splashify_group_entity/add",
+ *     "edit-form" = "/admin/structure/splashify_group_entity/{splashify_group_entity}/edit",
+ *     "delete-form" = "/admin/structure/splashify_group_entity/{splashify_group_entity}/delete",
+ *     "collection" = "/admin/structure/splashify_group_entity",
+ *   },
+ * )
+ */
+class SplashifyGroupEntity extends ContentEntityBase implements SplashifyGroupEntityInterface {
+
+  use EntityChangedTrait;
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function preCreate(EntityStorageInterface $storage_controller, array &$values) {
+    parent::preCreate($storage_controller, $values);
+    $values += array(
+      'user_id' => \Drupal::currentUser()->id(),
+    );
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getName() {
+    return $this->get('name')->value;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function setName($name) {
+    $this->set('name', $name);
+    return $this;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getCreatedTime() {
+    return $this->get('created')->value;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function setCreatedTime($timestamp) {
+    $this->set('created', $timestamp);
+    return $this;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getOwner() {
+    return $this->get('user_id')->entity;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getOwnerId() {
+    return $this->get('user_id')->target_id;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function setOwnerId($uid) {
+    $this->set('user_id', $uid);
+    return $this;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function setOwner(UserInterface $account) {
+    $this->set('user_id', $account->id());
+    return $this;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function isPublished() {
+    return (bool) $this->getEntityKey('status');
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function setPublished($published) {
+    $this->set('status', $published ? NODE_PUBLISHED : NODE_NOT_PUBLISHED);
+    return $this;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getSplashMode() {
+    return $this->get('field_splash_mode')->value;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function isRestrictRoles() {
+    return $this->get('field_restrict')->value;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getRoles() {
+    $roles = [];
+    foreach ($this->get('field_roles')->getValue() as $role) {
+      $roles[] = $role['target_id'];
+    }
+
+    return $roles;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getWhere() {
+    return $this->get('field_where')->value;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getListPages() {
+    return $this->get('field_list_pages')->value;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function isOpposite() {
+    return $this->get('field_opposite')->value;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getOften() {
+    return $this->get('field_often')->value;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function isDisableReferrerCheck() {
+    return $this->get('field_disable_check_referrer')->value;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getSize() {
+    return $this->get('field_size')->value;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getMode() {
+    return $this->get('field_mode')->value;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function baseFieldDefinitions(EntityTypeInterface $entity_type) {
+    $fields = parent::baseFieldDefinitions($entity_type);
+
+    $fields['user_id'] = BaseFieldDefinition::create('entity_reference')
+      ->setLabel(t('Authored by'))
+      ->setDescription(t('The user ID of author of the Splashify group entity entity.'))
+      ->setRevisionable(TRUE)
+      ->setSetting('target_type', 'user')
+      ->setSetting('handler', 'default')
+      ->setDefaultValueCallback('Drupal\node\Entity\Node::getCurrentUserId')
+      ->setTranslatable(TRUE)
+      ->setDisplayOptions('view', array(
+        'label' => 'hidden',
+        'type' => 'author',
+        'weight' => 0,
+      ))
+      ->setDisplayConfigurable('form', FALSE)
+      ->setDisplayConfigurable('view', FALSE);
+
+    $fields['name'] = BaseFieldDefinition::create('string')
+      ->setLabel(t('Name'))
+      ->setDescription(t('The name of the Splashify group entity entity.'))
+      ->setRequired(TRUE)
+      ->setSettings(array(
+        'max_length' => 50,
+        'text_processing' => 0,
+      ))
+      ->setDefaultValue('')
+      ->setDisplayOptions('view', array(
+        'label' => 'above',
+        'type' => 'string',
+        'weight' => -4,
+      ))
+      ->setDisplayOptions('form', array(
+        'type' => 'string_textfield',
+        'weight' => -4,
+      ))
+      ->setDisplayConfigurable('form', FALSE)
+      ->setDisplayConfigurable('view', FALSE);
+
+    $fields['status'] = BaseFieldDefinition::create('boolean')
+      ->setLabel(t('Publishing status'))
+      ->setDescription(t('A boolean indicating whether the Splashify group entity is published.'))
+      ->setDefaultValue(TRUE);
+
+    $fields['created'] = BaseFieldDefinition::create('created')
+      ->setLabel(t('Created'))
+      ->setDescription(t('The time that the entity was created.'));
+
+    $fields['changed'] = BaseFieldDefinition::create('changed')
+      ->setLabel(t('Changed'))
+      ->setDescription(t('The time that the entity was last edited.'));
+
+    $fields['field_disable_check_referrer'] = BaseFieldDefinition::create('boolean')
+      ->setLabel(t('Disable referrer check'))
+      ->setDescription(t('Show splash page even when page was loaded from an internal page.'))
+      ->setRequired(FALSE)
+      ->setTranslatable(FALSE)
+      ->setDefaultValue(0)
+      ->setDisplayOptions('view', array(
+        'type' => 'boolean',
+        'label' => 'inline',
+        'weight' => 3,
+        'settings' => array(
+          'format' => 'unicode-yes-no',
+        ),
+      ))
+      ->setDisplayOptions('form', array(
+        'type' => 'boolean_checkbox',
+        'weight' => 3,
+        'settings' => array(
+          'display_label' => TRUE,
+        ),
+      ))
+      ->setDisplayConfigurable('from', FALSE)
+      ->setDisplayConfigurable('view', FALSE);
+
+    $fields['field_list_pages'] = BaseFieldDefinition::create('string_long')
+      ->setLabel(t('List Pages'))
+      ->setDescription(t('Enter the paths of the pages where you want the splash'
+        . ' page to appear. Enter one path per line. Example paths are <b>/blog</b>'
+        . ' for the blog page. <b>&lt;front&gt;</b> is the front page.'))
+      ->setRequired(FALSE)
+      ->setTranslatable(FALSE)
+      ->setSetting('case_sensitive', FALSE)
+      ->setDisplayOptions('view', array(
+        'type' => 'basic_string',
+        'label' => 'inline',
+        'weight' => 9,
+      ))
+      ->setDisplayOptions('form', array(
+        'type' => 'string_textarea',
+        'weight' => 4,
+        'settings' => array(
+          'rows' => 5,
+        ),
+      ))
+      ->setDisplayConfigurable('from', FALSE)
+      ->setDisplayConfigurable('view', FALSE);
+
+    $fields['field_mode'] = BaseFieldDefinition::create('list_string')
+      ->setLabel(t('Splash Display Mode'))
+      ->setDescription(t('Determines how the splash page should show up.'))
+      ->setRequired(TRUE)
+      ->setTranslatable(FALSE)
+      ->setDefaultValue('full_screen')
+      ->setSetting('allowed_values', array(
+        'full_screen' => t('Full screen'),
+        'lightbox' => t('Open in a Lightbox (colorbox)'),
+        'window' => t('Open in new window'),
+        'redirect' => t('Redirect'),
+      ))
+      ->setDisplayOptions('view', array(
+        'type' => 'list_default',
+        'label' => 'inline',
+        'weight' => 11,
+      ))
+      ->setDisplayOptions('form', array(
+        'type' => 'options_select',
+        'weight' => 4,
+      ))
+      ->setDisplayConfigurable('from', FALSE)
+      ->setDisplayConfigurable('view', FALSE);
+
+    $fields['field_often'] = BaseFieldDefinition::create('list_string')
+      ->setLabel(t('How often should visitors see the splash page?'))
+      ->setDescription(t('How often should visitors see the splash page?'))
+      ->setRequired(TRUE)
+      ->setTranslatable(FALSE)
+      ->setDefaultValue('never')
+      ->setSetting('allowed_values', array(
+        'never' => t('Never (off)'),
+        'always' => t('Always'),
+        'once' => t('Once'),
+        'daily' => t('Daily'),
+        'weekly' => t('Weekly'),
+      ))
+      ->setDisplayOptions('view', array(
+        'type' => 'list_default',
+        'label' => 'inline',
+        'weight' => 4,
+      ))
+      ->setDisplayOptions('form', array(
+        'type' => 'options_select',
+        'weight' => 4,
+      ))
+      ->setDisplayConfigurable('from', FALSE)
+      ->setDisplayConfigurable('view', FALSE);
+
+    $fields['field_opposite'] = BaseFieldDefinition::create('boolean')
+      ->setLabel(t('Show the splash page on every page except for the option selected above.'))
+      ->setRequired(FALSE)
+      ->setTranslatable(FALSE)
+      ->setDefaultValue(0)
+      ->setDisplayOptions('view', array(
+        'type' => 'boolean',
+        'label' => 'inline',
+        'weight' => 10,
+        'settings' => array(
+          'format' => 'unicode-yes-no',
+        ),
+      ))
+      ->setDisplayOptions('form', array(
+        'type' => 'boolean_checkbox',
+        'weight' => 5,
+        'settings' => array(
+          'display_label' => TRUE,
+        ),
+      ))
+      ->setDisplayConfigurable('from', FALSE)
+      ->setDisplayConfigurable('view', FALSE);
+
+    $fields['field_restrict'] = BaseFieldDefinition::create('boolean')
+      ->setLabel(t('Restrict to selected roles'))
+      ->setRequired(FALSE)
+      ->setTranslatable(FALSE)
+      ->setDefaultValue(0)
+      ->setDisplayOptions('view', array(
+        'type' => 'boolean',
+        'label' => 'inline',
+        'weight' => 6,
+        'settings' => array(
+          'format' => 'unicode-yes-no',
+        ),
+      ))
+      ->setDisplayOptions('form', array(
+        'type' => 'boolean_checkbox',
+        'weight' => 5,
+        'settings' => array(
+          'display_label' => TRUE,
+        ),
+      ))
+      ->setDisplayConfigurable('from', FALSE)
+      ->setDisplayConfigurable('view', FALSE);
+
+    $fields['field_roles'] = BaseFieldDefinition::create('entity_reference')
+      ->setLabel(t('Which roles should this apply to:'))
+      ->setDescription(t('Add the roles for which it will apply'))
+      ->setRequired(FALSE)
+      ->setTranslatable(FALSE)
+      ->setCardinality(-1)
+      ->setSetting('target_type', 'user_role')
+      ->setSetting('handler', 'default')
+      ->setDisplayOptions('view', array(
+        'type' => 'entity_reference_label',
+        'label' => 'inline',
+        'weight' => 7,
+        'settings' => array(
+          'link' => FALSE,
+        ),
+      ))
+      ->setDisplayOptions('form', array(
+        'type' => 'entity_reference_autocomplete',
+        'weight' => 6,
+        'settings' => array(
+          'match_operator' => 'CONTAINS',
+          'size' => 60,
+        ),
+      ))
+      ->setDisplayConfigurable('from', FALSE)
+      ->setDisplayConfigurable('view', FALSE);
+
+    $fields['field_size'] = BaseFieldDefinition::create('string')
+      ->setLabel(t('Window/Box size'))
+      ->setDescription(t('Size (<code>WIDTHxHEIGHT</code>, e.g. 400x300) of the Window or Lightbox.'))
+      ->setRequired(TRUE)
+      ->setSettings(array(
+        'max_length' => 255,
+        'case_sensitive' => FALSE,
+      ))
+      ->setDefaultValue('400x300')
+      ->setDisplayOptions('view', array(
+        'type' => 'string',
+        'label' => 'inline',
+        'weight' => 12,
+        'settings' => array(
+          'link_to_entity' => FALSE,
+        ),
+      ))
+      ->setDisplayOptions('form', array(
+        'type' => 'string_textfield',
+        'weight' => 6,
+        'settings' => array(
+          'size' => 60,
+        ),
+      ))
+      ->setDisplayConfigurable('form', FALSE)
+      ->setDisplayConfigurable('view', FALSE);
+
+    $fields['field_splash_mode'] = BaseFieldDefinition::create('list_string')
+      ->setLabel(t('Splash Mode'))
+      ->setDescription(t('Determines how the content field below will be displayed'))
+      ->setRequired(TRUE)
+      ->setTranslatable(FALSE)
+      ->setDefaultValue('plain_text')
+      ->setSetting('allowed_values', array(
+        'plain_text' => t('Plain text'),
+        'template' => t('Use template'),
+      ))
+      ->setDisplayOptions('view', array(
+        'type' => 'list_default',
+        'label' => 'inline',
+        'weight' => 13,
+      ))
+      ->setDisplayOptions('form', array(
+        'type' => 'options_select',
+        'weight' => 5,
+      ))
+      ->setDisplayConfigurable('from', FALSE)
+      ->setDisplayConfigurable('view', FALSE);
+
+    $fields['field_where'] = BaseFieldDefinition::create('list_string')
+      ->setLabel(t('Specify where the splash page should show up:'))
+      ->setDescription(t('Define where the splash page should show up.'))
+      ->setRequired(TRUE)
+      ->setTranslatable(FALSE)
+      ->setDefaultValue('home')
+      ->setSetting('allowed_values', array(
+        'home' => t('Front Page'),
+        'all' => t('All Pages'),
+        'list' => t('List Pages'),
+      ))
+      ->setDisplayOptions('view', array(
+        'type' => 'list_default',
+        'label' => 'inline',
+        'weight' => 8,
+      ))
+      ->setDisplayOptions('form', array(
+        'type' => 'options_select',
+        'weight' => 3,
+      ))
+      ->setDisplayConfigurable('from', FALSE)
+      ->setDisplayConfigurable('view', FALSE);
+
+    return $fields;
+  }
+
+}
diff --git a/src/Entity/SplashifyGroupEntityInterface.php b/src/Entity/SplashifyGroupEntityInterface.php
new file mode 100644
index 0000000..916ded5
--- /dev/null
+++ b/src/Entity/SplashifyGroupEntityInterface.php
@@ -0,0 +1,77 @@
+<?php
+
+namespace Drupal\splashify\Entity;
+
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\Core\Entity\EntityChangedInterface;
+use Drupal\user\EntityOwnerInterface;
+
+/**
+ * Provides an interface for defining Splashify group entity entities.
+ *
+ * @ingroup splashify
+ */
+interface SplashifyGroupEntityInterface extends ContentEntityInterface, EntityChangedInterface, EntityOwnerInterface {
+
+  // Add get/set methods for your configuration properties here.
+
+  /**
+   * Gets the Splashify group entity name.
+   *
+   * @return string
+   *   Name of the Splashify group entity.
+   */
+  public function getName();
+
+  /**
+   * Sets the Splashify group entity name.
+   *
+   * @param string $name
+   *   The Splashify group entity name.
+   *
+   * @return \Drupal\splashify\Entity\SplashifyGroupEntityInterface
+   *   The called Splashify group entity entity.
+   */
+  public function setName($name);
+
+  /**
+   * Gets the Splashify group entity creation timestamp.
+   *
+   * @return int
+   *   Creation timestamp of the Splashify group entity.
+   */
+  public function getCreatedTime();
+
+  /**
+   * Sets the Splashify group entity creation timestamp.
+   *
+   * @param int $timestamp
+   *   The Splashify group entity creation timestamp.
+   *
+   * @return \Drupal\splashify\Entity\SplashifyGroupEntityInterface
+   *   The called Splashify group entity entity.
+   */
+  public function setCreatedTime($timestamp);
+
+  /**
+   * Returns the Splashify group entity published status indicator.
+   *
+   * Unpublished Splashify group entity are only visible to restricted users.
+   *
+   * @return bool
+   *   TRUE if the Splashify group entity is published.
+   */
+  public function isPublished();
+
+  /**
+   * Sets the published status of a Splashify group entity.
+   *
+   * @param bool $published
+   *   TRUE to set this Splashify group entity to published, FALSE to set it to unpublished.
+   *
+   * @return \Drupal\splashify\Entity\SplashifyGroupEntityInterface
+   *   The called Splashify group entity entity.
+   */
+  public function setPublished($published);
+
+}
diff --git a/src/Entity/SplashifyGroupEntityViewsData.php b/src/Entity/SplashifyGroupEntityViewsData.php
new file mode 100644
index 0000000..5ec2851
--- /dev/null
+++ b/src/Entity/SplashifyGroupEntityViewsData.php
@@ -0,0 +1,28 @@
+<?php
+
+namespace Drupal\splashify\Entity;
+
+use Drupal\views\EntityViewsData;
+use Drupal\views\EntityViewsDataInterface;
+
+/**
+ * Provides Views data for Splashify group entity entities.
+ */
+class SplashifyGroupEntityViewsData extends EntityViewsData implements EntityViewsDataInterface {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getViewsData() {
+    $data = parent::getViewsData();
+
+    $data['splashify_group_entity']['table']['base'] = array(
+      'field' => 'id',
+      'title' => $this->t('Splashify group entity'),
+      'help' => $this->t('The Splashify group entity ID.'),
+    );
+
+    return $data;
+  }
+
+}
diff --git a/src/Form/SplashifyEntityDeleteForm.php b/src/Form/SplashifyEntityDeleteForm.php
new file mode 100644
index 0000000..c850947
--- /dev/null
+++ b/src/Form/SplashifyEntityDeleteForm.php
@@ -0,0 +1,14 @@
+<?php
+
+namespace Drupal\splashify\Form;
+
+use Drupal\Core\Entity\ContentEntityDeleteForm;
+
+/**
+ * Provides a form for deleting Splashify entity entities.
+ *
+ * @ingroup splashify
+ */
+class SplashifyEntityDeleteForm extends ContentEntityDeleteForm {
+
+}
diff --git a/src/Form/SplashifyEntityForm.php b/src/Form/SplashifyEntityForm.php
new file mode 100644
index 0000000..5c25b6e
--- /dev/null
+++ b/src/Form/SplashifyEntityForm.php
@@ -0,0 +1,48 @@
+<?php
+
+namespace Drupal\splashify\Form;
+
+use Drupal\Core\Entity\ContentEntityForm;
+use Drupal\Core\Form\FormStateInterface;
+
+/**
+ * Form controller for Splashify entity edit forms.
+ *
+ * @ingroup splashify
+ */
+class SplashifyEntityForm extends ContentEntityForm {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function buildForm(array $form, FormStateInterface $form_state) {
+    /* @var $entity \Drupal\splashify\Entity\SplashifyEntity */
+    $form = parent::buildForm($form, $form_state);
+    $entity = $this->entity;
+
+    return $form;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function save(array $form, FormStateInterface $form_state) {
+    $entity = $this->entity;
+    $status = parent::save($form, $form_state);
+
+    switch ($status) {
+      case SAVED_NEW:
+        drupal_set_message($this->t('Created the %label Splashify entity.', [
+          '%label' => $entity->label(),
+        ]));
+        break;
+
+      default:
+        drupal_set_message($this->t('Saved the %label Splashify entity.', [
+          '%label' => $entity->label(),
+        ]));
+    }
+    $form_state->setRedirect('entity.splashify_entity.canonical', ['splashify_entity' => $entity->id()]);
+  }
+
+}
diff --git a/src/Form/SplashifyEntitySettingsForm.php b/src/Form/SplashifyEntitySettingsForm.php
new file mode 100644
index 0000000..4f7b8b9
--- /dev/null
+++ b/src/Form/SplashifyEntitySettingsForm.php
@@ -0,0 +1,55 @@
+<?php
+
+namespace Drupal\splashify\Form;
+
+use Drupal\Core\Form\FormBase;
+use Drupal\Core\Form\FormStateInterface;
+
+/**
+ * Class SplashifyEntitySettingsForm.
+ *
+ * @package Drupal\splashify\Form
+ *
+ * @ingroup splashify
+ */
+class SplashifyEntitySettingsForm extends FormBase {
+
+  /**
+   * Returns a unique string identifying the form.
+   *
+   * @return string
+   *   The unique string identifying the form.
+   */
+  public function getFormId() {
+    return 'SplashifyEntity_settings';
+  }
+
+  /**
+   * Form submission handler.
+   *
+   * @param array $form
+   *   An associative array containing the structure of the form.
+   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   *   The current state of the form.
+   */
+  public function submitForm(array &$form, FormStateInterface $form_state) {
+    // Empty implementation of the abstract submit class.
+  }
+
+  /**
+   * Defines the settings form for Splashify entity entities.
+   *
+   * @param array $form
+   *   An associative array containing the structure of the form.
+   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   *   The current state of the form.
+   *
+   * @return array
+   *   Form definition array.
+   */
+  public function buildForm(array $form, FormStateInterface $form_state) {
+    $form['SplashifyEntity_settings']['#markup'] = 'Settings form for Splashify entity entities. Manage field settings here.';
+    return $form;
+  }
+
+}
diff --git a/src/Form/SplashifyGroupEntityDeleteForm.php b/src/Form/SplashifyGroupEntityDeleteForm.php
new file mode 100644
index 0000000..7a7dac3
--- /dev/null
+++ b/src/Form/SplashifyGroupEntityDeleteForm.php
@@ -0,0 +1,14 @@
+<?php
+
+namespace Drupal\splashify\Form;
+
+use Drupal\Core\Entity\ContentEntityDeleteForm;
+
+/**
+ * Provides a form for deleting Splashify group entity entities.
+ *
+ * @ingroup splashify
+ */
+class SplashifyGroupEntityDeleteForm extends ContentEntityDeleteForm {
+
+}
diff --git a/src/Form/SplashifyGroupEntityForm.php b/src/Form/SplashifyGroupEntityForm.php
new file mode 100644
index 0000000..306a377
--- /dev/null
+++ b/src/Form/SplashifyGroupEntityForm.php
@@ -0,0 +1,125 @@
+<?php
+
+namespace Drupal\splashify\Form;
+
+use Drupal\Core\Entity\ContentEntityForm;
+use Drupal\Core\Form\FormStateInterface;
+
+/**
+ * Form controller for Splashify group entity edit forms.
+ *
+ * @ingroup splashify
+ */
+class SplashifyGroupEntityForm extends ContentEntityForm {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function buildForm(array $form, FormStateInterface $form_state) {
+    /* @var $entity \Drupal\splashify\Entity\SplashifyGroupEntity */
+    $entity = $this->entity;
+    $form = parent::buildForm($form, $form_state);
+
+    // Use drupal states.
+    $form['field_list_pages']['widget'][0]['value']['#states'] = array(
+      'visible' => array(
+        ':input[name="field_where"]' => array('value' => 'list'),
+      ),
+      'required' => array(
+        ':input[name="field_where"]' => array('value' => 'list'),
+      ),
+    );
+    $form['field_roles']['#states'] = array(
+      'visible' => array(
+        ':input[name="field_restrict[value]"]' => array('checked' => TRUE),
+      ),
+    );
+    $form['field_splash_mode']['#states'] = array(
+      'invisible' => array(
+        ':input[name="field_mode"]' => array('value' => 'full_screen'),
+      ),
+    );
+    $form['field_size']['widget'][0]['value']['#states'] = array(
+      'visible' => array(
+        ':input[name="field_mode"]' => array(
+          array('value' => 'window'),
+          array('value' => 'lightbox'),
+        ),
+      ),
+      'required' => array(
+        ':input[name="field_mode"]' => array(
+          array('value' => 'window'),
+          array('value' => 'lightbox'),
+        ),
+      ),
+    );
+    return $form;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function save(array $form, FormStateInterface $form_state) {
+    $entity = $this->entity;
+    $status = parent::save($form, $form_state);
+
+    switch ($status) {
+      case SAVED_NEW:
+        drupal_set_message($this->t('Created the %label Splashify group entity.', [
+          '%label' => $entity->label(),
+        ]));
+        break;
+
+      default:
+        drupal_set_message($this->t('Saved the %label Splashify group entity.', [
+          '%label' => $entity->label(),
+        ]));
+    }
+    $form_state->setRedirect('entity.splashify_group_entity.canonical', ['splashify_group_entity' => $entity->id()]);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function validateForm(array &$form, FormStateInterface $form_state) {
+    parent::validateForm($form, $form_state);
+    // If they have the opposite option checked, the "All" option should not be
+    // selected.
+    $values = $form_state->getValues();
+    if ($values['field_opposite']['value']) {
+      if ($values['field_where'][0]['value'] == 'all') {
+        $form_state->setError($form['field_where']['widget'], $this->t('The "All" option cannot be selected when checking the "Opposite" option.'));
+      }
+    }
+
+    // Make sure each path is valid.
+    $paths = $values['field_list_pages'][0]['value'];
+    $what_paths = preg_split('/[\n\r]+/', $paths);
+    $errors = array();
+    foreach ($what_paths as $path) {
+      // If this is a valid Drupal path.
+      if ($is_valid = \Drupal::service('path.validator')->isValid($path)) {
+        continue;
+      }
+
+      // Now check if this is a url value.
+      if (substr($path, 0, 7) == 'http://') {
+        continue;
+      }
+
+      // This path is not an alias or the source url.
+      $errors[] .= t('The path "@path" is not valid.', array('@path' => $path));
+    }
+
+    // Since there could be multiple errors for this one field, we want to
+    // break each error into a separate line.
+    if (count($errors) > 0) {
+      $form_state->setError($form['field_list_pages']['widget'], implode('<br />', $errors));
+    }
+
+    // Require field_list_pages values.
+    if (empty($paths) && $values['field_where'][0]['value'] == 'list') {
+      $form_state->setError($form['field_list_pages']['widget'], $this->t("Field 'List Pages' can't be empty"));
+    }
+  }
+}
diff --git a/src/Form/SplashifyGroupEntitySettingsForm.php b/src/Form/SplashifyGroupEntitySettingsForm.php
new file mode 100644
index 0000000..2348cf6
--- /dev/null
+++ b/src/Form/SplashifyGroupEntitySettingsForm.php
@@ -0,0 +1,55 @@
+<?php
+
+namespace Drupal\splashify\Form;
+
+use Drupal\Core\Form\FormBase;
+use Drupal\Core\Form\FormStateInterface;
+
+/**
+ * Class SplashifyGroupEntitySettingsForm.
+ *
+ * @package Drupal\splashify\Form
+ *
+ * @ingroup splashify
+ */
+class SplashifyGroupEntitySettingsForm extends FormBase {
+
+  /**
+   * Returns a unique string identifying the form.
+   *
+   * @return string
+   *   The unique string identifying the form.
+   */
+  public function getFormId() {
+    return 'SplashifyGroupEntity_settings';
+  }
+
+  /**
+   * Form submission handler.
+   *
+   * @param array $form
+   *   An associative array containing the structure of the form.
+   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   *   The current state of the form.
+   */
+  public function submitForm(array &$form, FormStateInterface $form_state) {
+    // Empty implementation of the abstract submit class.
+  }
+
+  /**
+   * Defines the settings form for Splashify group entity entities.
+   *
+   * @param array $form
+   *   An associative array containing the structure of the form.
+   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   *   The current state of the form.
+   *
+   * @return array
+   *   Form definition array.
+   */
+  public function buildForm(array $form, FormStateInterface $form_state) {
+    $form['SplashifyGroupEntity_settings']['#markup'] = 'Settings form for Splashify group entity entities. Manage field settings here.';
+    return $form;
+  }
+
+}
diff --git a/src/PageCache/SplashifyPath.php b/src/PageCache/SplashifyPath.php
new file mode 100644
index 0000000..2a56752
--- /dev/null
+++ b/src/PageCache/SplashifyPath.php
@@ -0,0 +1,25 @@
+<?php
+
+namespace Drupal\splashify\PageCache;
+
+use Drupal\Core\PageCache\RequestPolicyInterface;
+use Symfony\Component\HttpFoundation\Request;
+
+/**
+ * Disable cache if splash exist.
+ */
+class SplashifyPath implements RequestPolicyInterface {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function check(Request $request) {
+    if (\Drupal::service('splashify.injection')->isSplashExist($request)) {
+      \Drupal::service('page_cache_kill_switch')->trigger();
+      return static::DENY;
+    }
+
+    return static::ALLOW;
+  }
+
+}
diff --git a/src/Service/SplashifyInjection.php b/src/Service/SplashifyInjection.php
new file mode 100644
index 0000000..7098c74
--- /dev/null
+++ b/src/Service/SplashifyInjection.php
@@ -0,0 +1,315 @@
+<?php
+namespace Drupal\splashify\Service;
+
+use Drupal\Component\Utility\Unicode;
+use Drupal\splashify\Entity\SplashifyEntity;
+use Drupal\splashify\Entity\SplashifyGroupEntity;
+use Symfony\Component\HttpFoundation\Request;
+
+/**
+ * Class SplashifyInjection.
+ *
+ * @package Drupal\splashify\Service
+ */
+class SplashifyInjection {
+
+  protected $splash = NULL;
+
+  /**
+   * Default time line.
+   */
+  protected $timeLine = [
+    // Set to expire in one year.
+    'once' => 31536000,
+    // Set to expire in 24 hours.
+    'daily' => 86400,
+    // Set to expire in 7 days.
+    'weekly' => 604800,
+    // Always when load page.
+    'always' => 0,
+  ];
+
+  /**
+   * Check is splash exist. If exist then remembered.
+   *
+   * @param \Symfony\Component\HttpFoundation\Request $request
+   *   The incoming request object.
+   *
+   * @return bool
+   *   The check result.
+   */
+  public function isSplashExist(Request $request = NULL) {
+    // At the first check in the request no session. It should pass this check.
+    if (is_object($request) && !$request->hasSession()) {
+      return TRUE;
+    }
+
+    if (!empty($this->splash)) {
+      return TRUE;
+    }
+
+    $this->splash = $this->findSplash();
+
+    return !empty($this->splash);
+  }
+
+  /**
+   * Received all of splash groups that can be displayed on the current page.
+   *
+   * @return array
+   *   Array of SplashifyGroupsEntity.
+   */
+  private function getPageGroups() {
+    $groups = SplashifyGroupEntity::loadMultiple();
+
+    $page_groups = [];
+
+    foreach ($groups as $group) {
+      if ($this->checkRole($group) && $this->checkWhere($group)) {
+        $page_groups[$group->id()] = $group;
+      }
+    }
+
+    return $page_groups;
+  }
+
+  /**
+   * Received all of splashes that can be displayed on the current page.
+   *
+   * @return array
+   *   Array of SplashifyEntity.
+   */
+  private function getSplashes() {
+    $page_groups = $this->getPageGroups();
+    $page_groups_id = array_keys($page_groups);
+
+    if (empty($page_groups_id)) {
+      return [];
+    }
+
+    $splashes_id = \Drupal::entityQuery('splashify_entity')
+      ->condition('status', 1)
+      ->sort('field_weight', 'DESC')
+      ->sort('id', 'DESC')
+      ->condition('field_group', $page_groups_id, 'IN')
+      ->execute();
+
+    if (empty($splashes_id)) {
+      return [];
+    }
+
+    $splashes = SplashifyEntity::loadMultiple($splashes_id);
+
+    return $splashes;
+  }
+
+  /**
+   * Choosing an entity which will be displayed.
+   *
+   * @return SplashifyEntity|null
+   *   Splash that passes all conditions and has the biggest weight.
+   */
+  private function findSplash() {
+    $splashes = $this->getSplashes();
+
+    // Check which item need display.
+    foreach ($splashes as $splash) {
+      if ($this->checkFrequency($splash)) {
+        return $splash;
+      }
+    }
+
+    return NULL;
+  }
+
+  /**
+   * Generated render element.
+   *
+   * @param $splash
+   *   Splash which will be displayed.
+   * @return array
+   */
+  private function getRenderElement($splash) {
+    $build = [];
+    $mode = $splash->getGroup()->getMode();
+
+    switch ($mode) {
+      case 'redirect':
+        $build = [
+          '#attached' => [
+            'drupalSettings' => [
+              'splashify' => [
+                'mode' => 'redirect',
+                'url' => '/splashify/' . $splash->id(),
+              ],
+            ],
+            'library' => [
+              'splashify/redirect',
+            ],
+          ],
+        ];
+
+        break;
+
+      case 'window':
+        $size = explode('x', $splash->getGroup()->getSize());
+        $width = is_numeric($size[0]) ? $size[0] : 800;
+        $height = is_numeric($size[1]) ? $size[1] : 600;
+
+        $build = [
+          '#attached' => [
+            'drupalSettings' => [
+              'splashify' => [
+                'mode' => 'window',
+                'url' => '/splashify/' . $splash->id(),
+                'size' => "width={$width}, height={$height}",
+              ],
+            ],
+            'library' => [
+              'splashify/window',
+            ],
+          ],
+        ];
+
+        break;
+
+      case 'full_screen':
+        $build = [
+          '#theme' => 'splashify',
+          '#splashify_content' => $splash->getContent(),
+          '#attached' => [
+            'drupalSettings' => [
+              'splashify' => [
+                'mode' => 'full_screen',
+              ],
+            ],
+            'library' => [
+              'splashify/full_screen',
+            ],
+          ],
+        ];
+        break;
+
+      case 'lightbox':
+        $size = explode('x', $splash->getGroup()->getSize());
+        \Drupal::service('colorbox.attachment')->attach($build);
+
+        $build['#attached']['drupalSettings']['splashify'] = [
+          'mode' => 'lightbox',
+          'url' => '/splashify/' . $splash->id(),
+          'width' => is_numeric($size[0]) ? $size[0] : 800,
+          'height' => is_numeric($size[1]) ? $size[1] : 600,
+        ];
+
+        $build['#attached']['library'][] = 'splashify/lightbox';
+        break;
+    }
+
+    $build['#cache']['max-age'] = 0;
+    $build['#attached']['drupalSettings']['splashify']['refferer_check'] = !$splash->getGroup()
+      ->isDisableReferrerCheck();
+    array_unshift($build['#attached']['library'], 'splashify/splash_init');
+
+    return $build;
+  }
+
+  /**
+   * Returns render element.
+   *
+   * If this method is called it is considered that splash was shown.
+   *
+   * @return array
+   */
+  public function getAttach() {
+
+    if (!$this->isSplashExist()) {
+      return [];
+    }
+
+    setcookie("splashify[" . $this->splash->id() . "]", REQUEST_TIME, NULL, '/');
+    return $this->getRenderElement($this->splash);
+  }
+
+  /**
+   * Check if the role of the current user pass the conditions in the group.
+   *
+   * @param $group
+   * @return bool
+   */
+  private function checkRole($group) {
+    // Get user account.
+    $account = \Drupal::currentUser()->getAccount();
+
+    // Check whether use role setting is checked.
+    if ($group->isRestrictRoles()) {
+
+      $account_roles = $account->getRoles();
+      $group_roles = $group->getRoles();
+
+      return !empty(array_intersect($account_roles, $group_roles));
+    }
+
+    return TRUE;
+  }
+
+  /**
+   * Check if the current page pass the conditions in the group.
+   *
+   * @param $group
+   * @return bool
+   */
+  private function checkWhere($group) {
+    $where = $group->getWhere();
+
+    switch ($where) {
+      case 'all':
+        return TRUE;
+
+      case 'home':
+        $is_front = \Drupal::service('path.matcher')->isFrontPage();
+        return $group->isOpposite() ? !$is_front : $is_front;
+
+      case 'list':
+        $pages = Unicode::strtolower($group->getListPages());
+
+        $path = \Drupal::service('path.current')->getPath();
+        // Do not trim a trailing slash if that is the complete path.
+        $path = $path === '/' ? $path : rtrim($path, '/');
+        $path_alias = Unicode::strtolower(\Drupal::service('path.alias_manager')
+          ->getAliasByPath($path));
+        $path_matcher = \Drupal::service('path.matcher');
+
+        $is_match = $path_matcher->matchPath($path_alias, $pages) ||
+          (($path != $path_alias) && $path_matcher->matchPath($path, $pages));
+
+        return $group->isOpposite() ? !$is_match : $is_match;
+    }
+
+    return TRUE;
+  }
+
+  /**
+   * Checks can we display splash again from the group.
+   *
+   * @param $splash
+   * @return bool
+   */
+  private function checkFrequency($splash) {
+    $frequency = $splash->getGroup()->getOften();
+
+    if ($frequency == 'never') {
+      return FALSE;
+    }
+
+    $cookie = \Drupal::request()->cookies;
+    $splashify_cookies = $cookie->get('splashify');
+
+    if (!array_key_exists($splash->id(), $splashify_cookies)) {
+      return TRUE;
+    }
+
+    $expired_time = REQUEST_TIME - $splashify_cookies[$splash->id()];
+    return $expired_time >= $this->timeLine[$frequency];
+  }
+
+}
diff --git a/src/SplashifyEntityAccessControlHandler.php b/src/SplashifyEntityAccessControlHandler.php
new file mode 100644
index 0000000..f80374b
--- /dev/null
+++ b/src/SplashifyEntityAccessControlHandler.php
@@ -0,0 +1,47 @@
+<?php
+
+namespace Drupal\splashify;
+
+use Drupal\Core\Entity\EntityAccessControlHandler;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\Access\AccessResult;
+
+/**
+ * Access controller for the Splashify entity entity.
+ *
+ * @see \Drupal\splashify\Entity\SplashifyEntity.
+ */
+class SplashifyEntityAccessControlHandler extends EntityAccessControlHandler {
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
+    /** @var \Drupal\splashify\Entity\SplashifyEntityInterface $entity */
+    switch ($operation) {
+      case 'view':
+        if (!$entity->isPublished()) {
+          return AccessResult::allowedIfHasPermission($account, 'view unpublished Splashify entity entities');
+        }
+        return AccessResult::allowedIfHasPermission($account, 'view published Splashify entity entities');
+
+      case 'update':
+        return AccessResult::allowedIfHasPermission($account, 'edit Splashify entity entities');
+
+      case 'delete':
+        return AccessResult::allowedIfHasPermission($account, 'delete Splashify entity entities');
+    }
+
+    // Unknown operation, no opinion.
+    return AccessResult::neutral();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function checkCreateAccess(AccountInterface $account, array $context, $entity_bundle = NULL) {
+    return AccessResult::allowedIfHasPermission($account, 'add Splashify entity entities');
+  }
+
+}
diff --git a/src/SplashifyEntityHtmlRouteProvider.php b/src/SplashifyEntityHtmlRouteProvider.php
new file mode 100644
index 0000000..c17f4a7
--- /dev/null
+++ b/src/SplashifyEntityHtmlRouteProvider.php
@@ -0,0 +1,85 @@
+<?php
+
+namespace Drupal\splashify;
+
+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\Core\Entity\Routing\AdminHtmlRouteProvider;
+use Symfony\Component\Routing\Route;
+
+/**
+ * Provides routes for Splashify entity entities.
+ *
+ * @see Drupal\Core\Entity\Routing\AdminHtmlRouteProvider
+ * @see Drupal\Core\Entity\Routing\DefaultHtmlRouteProvider
+ */
+class SplashifyEntityHtmlRouteProvider extends AdminHtmlRouteProvider {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getRoutes(EntityTypeInterface $entity_type) {
+    $collection = parent::getRoutes($entity_type);
+
+    $entity_type_id = $entity_type->id();
+
+    if ($collection_route = $this->getCollectionRoute($entity_type)) {
+      $collection->add("entity.{$entity_type_id}.collection", $collection_route);
+    }
+
+    if ($settings_form_route = $this->getSettingsFormRoute($entity_type)) {
+      $collection->add("$entity_type_id.settings", $settings_form_route);
+    }
+
+    return $collection;
+  }
+
+  /**
+   * Gets the collection route.
+   *
+   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   *   The entity type.
+   *
+   * @return \Symfony\Component\Routing\Route|null
+   *   The generated route, if available.
+   */
+  protected function getCollectionRoute(EntityTypeInterface $entity_type) {
+    if ($entity_type->hasLinkTemplate('collection') && $entity_type->hasListBuilderClass()) {
+      $entity_type_id = $entity_type->id();
+      $route = new Route($entity_type->getLinkTemplate('collection'));
+      $route
+        ->setDefaults([
+          '_entity_list' => $entity_type_id,
+          '_title' => "{$entity_type->getLabel()} list",
+        ])
+        ->setRequirement('_permission', 'view Splashify entity entities')
+        ->setOption('_admin_route', TRUE);
+
+      return $route;
+    }
+  }
+
+  /**
+   * Gets the settings form route.
+   *
+   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   *   The entity type.
+   *
+   * @return \Symfony\Component\Routing\Route|null
+   *   The generated route, if available.
+   */
+  protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
+    if (!$entity_type->getBundleEntityType()) {
+      $route = new Route("/admin/structure/{$entity_type->id()}/settings");
+      $route
+        ->setDefaults([
+          '_form' => 'Drupal\splashify\Form\SplashifyEntitySettingsForm',
+          '_title' => "{$entity_type->getLabel()} settings",
+        ])
+        ->setRequirement('_permission', $entity_type->getAdminPermission())
+        ->setOption('_admin_route', TRUE);
+
+      return $route;
+    }
+  }
+
+}
diff --git a/src/SplashifyEntityListBuilder.php b/src/SplashifyEntityListBuilder.php
new file mode 100644
index 0000000..456ee03
--- /dev/null
+++ b/src/SplashifyEntityListBuilder.php
@@ -0,0 +1,83 @@
+<?php
+
+namespace Drupal\splashify;
+
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Entity\EntityListBuilder;
+use Drupal\Core\Routing\LinkGeneratorTrait;
+use Drupal\Core\Url;
+use Drupal\splashify\Entity\SplashifyGroupEntity;
+
+/**
+ * Defines a class to build a listing of Splashify entity entities.
+ *
+ * @ingroup splashify
+ */
+class SplashifyEntityListBuilder extends EntityListBuilder {
+
+  use LinkGeneratorTrait;
+
+  /**
+   * {@inheritdoc}
+   */
+  public function buildHeader() {
+    $header['id'] = $this->t('ID');
+    $header['name'] = $this->t('Name');
+    $header['group'] = $this->t('Group');
+    $header['weight'] = $this->t('Weight');
+    return $header + parent::buildHeader();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function buildRow(EntityInterface $entity) {
+    /* @var $entity \Drupal\splashify\Entity\SplashifyEntity */
+    $row['id'] = $entity->id();
+    $row['name'] = $this->l(
+      $entity->label(),
+      new Url(
+        'entity.splashify_entity.edit_form', array(
+          'splashify_entity' => $entity->id(),
+        )
+      )
+    );
+    $entity_id = $entity->field_group->getValue();
+    $entity_id = $entity_id[0]['target_id'];
+    $entity_group = SplashifyGroupEntity::load($entity_id);
+    if (!empty($entity_group)) {
+      $row['group'] = $this->l(
+        $entity_group->label(),
+        new Url(
+          'entity.splashify_group_entity.edit_form', array(
+            'splashify_group_entity' => $entity_id,
+          )
+        )
+      );
+    }
+    else {
+      $row['group'] = $this->t('None');
+    }
+
+    $row['weight'] = $entity->field_weight->value;
+    return $row + parent::buildRow($entity);
+  }
+
+  /**
+   * Loads entity IDs using a pager sorted by the entity id.
+   *
+   * @return array
+   *   An array of entity IDs.
+   */
+  protected function getEntityIds() {
+    $query = \Drupal::entityQuery('splashify_entity')
+      ->sort('field_weight', 'DESC')
+      ->sort('id', 'DESC');
+    // Only add the pager if a limit is specified.
+    if ($this->limit) {
+      $query->pager($this->limit);
+    }
+    return $query->execute();
+  }
+
+}
diff --git a/src/SplashifyGroupEntityAccessControlHandler.php b/src/SplashifyGroupEntityAccessControlHandler.php
new file mode 100644
index 0000000..128c1cc
--- /dev/null
+++ b/src/SplashifyGroupEntityAccessControlHandler.php
@@ -0,0 +1,47 @@
+<?php
+
+namespace Drupal\splashify;
+
+use Drupal\Core\Entity\EntityAccessControlHandler;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\Access\AccessResult;
+
+/**
+ * Access controller for the Splashify group entity entity.
+ *
+ * @see \Drupal\splashify\Entity\SplashifyGroupEntity.
+ */
+class SplashifyGroupEntityAccessControlHandler extends EntityAccessControlHandler {
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
+    /** @var \Drupal\splashify\Entity\SplashifyGroupEntityInterface $entity */
+    switch ($operation) {
+      case 'view':
+        if (!$entity->isPublished()) {
+          return AccessResult::allowedIfHasPermission($account, 'view unpublished Splashify group entity entities');
+        }
+        return AccessResult::allowedIfHasPermission($account, 'view published Splashify group entity entities');
+
+      case 'update':
+        return AccessResult::allowedIfHasPermission($account, 'edit Splashify group entity entities');
+
+      case 'delete':
+        return AccessResult::allowedIfHasPermission($account, 'delete Splashify group entity entities');
+    }
+
+    // Unknown operation, no opinion.
+    return AccessResult::neutral();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function checkCreateAccess(AccountInterface $account, array $context, $entity_bundle = NULL) {
+    return AccessResult::allowedIfHasPermission($account, 'add Splashify group entity entities');
+  }
+
+}
diff --git a/src/SplashifyGroupEntityHtmlRouteProvider.php b/src/SplashifyGroupEntityHtmlRouteProvider.php
new file mode 100644
index 0000000..07d8005
--- /dev/null
+++ b/src/SplashifyGroupEntityHtmlRouteProvider.php
@@ -0,0 +1,85 @@
+<?php
+
+namespace Drupal\splashify;
+
+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\Core\Entity\Routing\AdminHtmlRouteProvider;
+use Symfony\Component\Routing\Route;
+
+/**
+ * Provides routes for Splashify group entity entities.
+ *
+ * @see Drupal\Core\Entity\Routing\AdminHtmlRouteProvider
+ * @see Drupal\Core\Entity\Routing\DefaultHtmlRouteProvider
+ */
+class SplashifyGroupEntityHtmlRouteProvider extends AdminHtmlRouteProvider {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getRoutes(EntityTypeInterface $entity_type) {
+    $collection = parent::getRoutes($entity_type);
+
+    $entity_type_id = $entity_type->id();
+
+    if ($collection_route = $this->getCollectionRoute($entity_type)) {
+      $collection->add("entity.{$entity_type_id}.collection", $collection_route);
+    }
+
+    if ($settings_form_route = $this->getSettingsFormRoute($entity_type)) {
+      $collection->add("$entity_type_id.settings", $settings_form_route);
+    }
+
+    return $collection;
+  }
+
+  /**
+   * Gets the collection route.
+   *
+   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   *   The entity type.
+   *
+   * @return \Symfony\Component\Routing\Route|null
+   *   The generated route, if available.
+   */
+  protected function getCollectionRoute(EntityTypeInterface $entity_type) {
+    if ($entity_type->hasLinkTemplate('collection') && $entity_type->hasListBuilderClass()) {
+      $entity_type_id = $entity_type->id();
+      $route = new Route($entity_type->getLinkTemplate('collection'));
+      $route
+        ->setDefaults([
+          '_entity_list' => $entity_type_id,
+          '_title' => "{$entity_type->getLabel()} list",
+        ])
+        ->setRequirement('_permission', 'view Splashify group entity entities')
+        ->setOption('_admin_route', TRUE);
+
+      return $route;
+    }
+  }
+
+  /**
+   * Gets the settings form route.
+   *
+   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   *   The entity type.
+   *
+   * @return \Symfony\Component\Routing\Route|null
+   *   The generated route, if available.
+   */
+  protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
+    if (!$entity_type->getBundleEntityType()) {
+      $route = new Route("/admin/structure/{$entity_type->id()}/settings");
+      $route
+        ->setDefaults([
+          '_form' => 'Drupal\splashify\Form\SplashifyGroupEntitySettingsForm',
+          '_title' => "{$entity_type->getLabel()} settings",
+        ])
+        ->setRequirement('_permission', $entity_type->getAdminPermission())
+        ->setOption('_admin_route', TRUE);
+
+      return $route;
+    }
+  }
+
+}
diff --git a/src/SplashifyGroupEntityListBuilder.php b/src/SplashifyGroupEntityListBuilder.php
new file mode 100644
index 0000000..303963b
--- /dev/null
+++ b/src/SplashifyGroupEntityListBuilder.php
@@ -0,0 +1,45 @@
+<?php
+
+namespace Drupal\splashify;
+
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Entity\EntityListBuilder;
+use Drupal\Core\Routing\LinkGeneratorTrait;
+use Drupal\Core\Url;
+
+/**
+ * Defines a class to build a listing of Splashify group entity entities.
+ *
+ * @ingroup splashify
+ */
+class SplashifyGroupEntityListBuilder extends EntityListBuilder {
+
+  use LinkGeneratorTrait;
+
+  /**
+   * {@inheritdoc}
+   */
+  public function buildHeader() {
+    $header['id'] = $this->t('ID');
+    $header['name'] = $this->t('Name');
+    return $header + parent::buildHeader();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function buildRow(EntityInterface $entity) {
+    /* @var $entity \Drupal\splashify\Entity\SplashifyGroupEntity */
+    $row['id'] = $entity->id();
+    $row['name'] = $this->l(
+      $entity->label(),
+      new Url(
+        'entity.splashify_group_entity.edit_form', array(
+          'splashify_group_entity' => $entity->id(),
+        )
+      )
+    );
+    return $row + parent::buildRow($entity);
+  }
+
+}
diff --git a/templates/splashify.html.twig b/templates/splashify.html.twig
new file mode 100644
index 0000000..50496e2
--- /dev/null
+++ b/templates/splashify.html.twig
@@ -0,0 +1,7 @@
+{% if splashify_content %}
+    <div id="splashify" class="splash-wrapper" >
+        <div class="splash-inner">
+            {{ splashify_content|raw }}
+        </div>
+    </div>
+{% endif %}
diff --git a/templates/splashify_entity.html.twig b/templates/splashify_entity.html.twig
new file mode 100644
index 0000000..40505fd
--- /dev/null
+++ b/templates/splashify_entity.html.twig
@@ -0,0 +1,22 @@
+{#
+/**
+ * @file splashify_entity.html.twig
+ * Default theme implementation to present Splashify entity data.
+ *
+ * This template is used when viewing Splashify entity pages.
+ *
+ *
+ * Available variables:
+ * - content: A list of content items. Use 'content' to print all content, or
+ * - attributes: HTML attributes for the container element.
+ *
+ * @see template_preprocess_splashify_entity()
+ *
+ * @ingroup themeable
+ */
+#}
+<div{{ attributes.addClass('splashify_entity') }}>
+  {% if content %}
+    {{- content -}}
+  {% endif %}
+</div>
diff --git a/templates/splashify_group_entity.html.twig b/templates/splashify_group_entity.html.twig
new file mode 100644
index 0000000..5dd602b
--- /dev/null
+++ b/templates/splashify_group_entity.html.twig
@@ -0,0 +1,22 @@
+{#
+/**
+ * @file splashify_group_entity.html.twig
+ * Default theme implementation to present Splashify group entity data.
+ *
+ * This template is used when viewing Splashify group entity pages.
+ *
+ *
+ * Available variables:
+ * - content: A list of content items. Use 'content' to print all content, or
+ * - attributes: HTML attributes for the container element.
+ *
+ * @see template_preprocess_splashify_group_entity()
+ *
+ * @ingroup themeable
+ */
+#}
+<div{{ attributes.addClass('splashify_group_entity') }}>
+  {% if content %}
+    {{- content -}}
+  {% endif %}
+</div>
